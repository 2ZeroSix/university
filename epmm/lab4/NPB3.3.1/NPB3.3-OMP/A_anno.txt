/* 
 * Command line: opannotate -s ./bin/sp.A.x 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: Intel Silvermont microarchitecture, speed 2160 MHz (estimated)
 * Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 100000
 * Counted LLC_MISSES events (Last level cache demand requests from this core that missed the LLC) with a unit mask of 0x41 (No unit mask) count 100000
 * Counted LLC_REFS events (Last level cache demand requests from this core) with a unit mask of 0x4f (No unit mask) count 100000
 */
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/rhs.f"
 * 
 * 919118 41.1515 11990 57.3191 14705 42.8355
 */


                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
    23  0.0010     0       0     0       0     :       subroutine compute_rhs /* compute_rhs_ total:      2 9.0e-05     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k, m
                                               :       double precision aux, rho_inv, uijk, up1, um1, vijk, vp1, vm1,
                                               :     >                  wijk, wp1, wm1
                                               :
                                               :
                                               :       if (timeron) call timer_start(t_rhs)
                                               :!$omp parallel default(shared) private(i,j,k,m,rho_inv,aux,uijk,up1,um1,
    11 4.9e-04     0       0     0       0     :!$omp&   vijk,vp1,vm1,wijk,wp1,wm1) /* compute_rhs_._omp_fn.0 total: 919116 41.1514 11990 57.3191 14705 42.8355 */
                                               :c---------------------------------------------------------------------
                                               :c      compute the reciprocal of density, and the kinetic energy, 
                                               :c      and the speed of sound. 
                                               :c---------------------------------------------------------------------
                                               :
                                               :!$omp do schedule(static)
                                               :       do    k = 0, grid_points(3)-1
   116  0.0052     0       0     1  0.0029     :          do    j = 0, grid_points(2)-1
  1109  0.0497    17  0.0813    11  0.0320     :             do    i = 0, grid_points(1)-1
  1380  0.0618    33  0.1578    13  0.0379     :                rho_inv = 1.0d0/u(1,i,j,k)
 27328  1.2236   281  1.3433   224  0.6525     :                rho_i(i,j,k) = rho_inv
  3566  0.1597    52  0.2486    26  0.0757     :                us(i,j,k) = u(2,i,j,k) * rho_inv
  4694  0.2102    33  0.1578    15  0.0437     :                vs(i,j,k) = u(3,i,j,k) * rho_inv
  5797  0.2595    44  0.2103    32  0.0932     :                ws(i,j,k) = u(4,i,j,k) * rho_inv
                                               :                square(i,j,k)     = 0.5d0* (
                                               :     >                        u(2,i,j,k)*u(2,i,j,k) + 
                                               :     >                        u(3,i,j,k)*u(3,i,j,k) +
 14049  0.6290   149  0.7123   109  0.3175     :     >                        u(4,i,j,k)*u(4,i,j,k) ) * rho_inv
  2869  0.1285    15  0.0717    56  0.1631     :                qs(i,j,k) = square(i,j,k) * rho_inv
                                               :c---------------------------------------------------------------------
                                               :c               (don't need speed and ainx until the lhs computation)
                                               :c---------------------------------------------------------------------
  8958  0.4011    66  0.3155   161  0.4690     :                aux = c1c2*rho_inv* (u(5,i,j,k) - square(i,j,k))
 34968  1.5656   642  3.0691   576  1.6779     :                speed(i,j,k) = dsqrt(aux)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :c---------------------------------------------------------------------
                                               :c copy the exact forcing term to the right hand side;  because 
                                               :c this forcing term is known, we can store it on the whole grid
                                               :c including the boundary                   
                                               :c---------------------------------------------------------------------
                                               :
    11 4.9e-04     0       0     0       0     :!$omp do schedule(static)
                                               :       do    k = 0, nz2+1
    50  0.0022     3  0.0143     4  0.0117     :          do    j = 0, ny2+1
    26  0.0012     1  0.0048     5  0.0146     :             do    i = 0, nx2+1
                                               :                do    m = 1, 5
 59372  2.6583  1150  5.4977  1993  5.8056     :                   rhs(m,i,j,k) = forcing(m,i,j,k)
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      compute xi-direction fluxes 
                                               :c---------------------------------------------------------------------
     6 2.7e-04     0       0     0       0     :!$omp master
     2 9.0e-05     0       0     0       0     :       if (timeron) call timer_start(t_rhsx)
                                               :!$omp end master
     1 4.5e-05     0       0     0       0     :!$omp do schedule(static)
                                               :       do    k = 1, nz2
   141  0.0063     0       0     0       0     :          do    j = 1, ny2
  8020  0.3591    18  0.0861     9  0.0262     :             do    i = 1, nx2
                                               :                uijk = us(i,j,k)
     2 9.0e-05     0       0     0       0     :                up1  = us(i+1,j,k)
                                               :                um1  = us(i-1,j,k)
                                               :
                                               :                rhs(1,i,j,k) = rhs(1,i,j,k) + dx1tx1 * 
                                               :     >                    (u(1,i+1,j,k) - 2.0d0*u(1,i,j,k) + 
                                               :     >                     u(1,i-1,j,k)) -
 20585  0.9216   135  0.6454   274  0.7982     :     >                    tx2 * (u(2,i+1,j,k) - u(2,i-1,j,k))
                                               :
                                               :                rhs(2,i,j,k) = rhs(2,i,j,k) + dx2tx1 * 
                                               :     >                    (u(2,i+1,j,k) - 2.0d0*u(2,i,j,k) + 
                                               :     >                     u(2,i-1,j,k)) +
                                               :     >                    xxcon2*con43 * (up1 - 2.0d0*uijk + um1) -
                                               :     >                    tx2 * (u(2,i+1,j,k)*up1 - 
                                               :     >                           u(2,i-1,j,k)*um1 +
                                               :     >                           (u(5,i+1,j,k)- square(i+1,j,k)-
                                               :     >                            u(5,i-1,j,k)+ square(i-1,j,k))*
 41382  1.8528   715  3.4181   497  1.4478     :     >                            c2)
                                               :
                                               :                rhs(3,i,j,k) = rhs(3,i,j,k) + dx3tx1 * 
                                               :     >                    (u(3,i+1,j,k) - 2.0d0*u(3,i,j,k) +
                                               :     >                     u(3,i-1,j,k)) +
                                               :     >                    xxcon2 * (vs(i+1,j,k) - 2.0d0*vs(i,j,k) +
                                               :     >                              vs(i-1,j,k)) -
                                               :     >                    tx2 * (u(3,i+1,j,k)*up1 - 
 23078  1.0333   160  0.7649   141  0.4107     :     >                           u(3,i-1,j,k)*um1)
                                               :
                                               :                rhs(4,i,j,k) = rhs(4,i,j,k) + dx4tx1 * 
                                               :     >                    (u(4,i+1,j,k) - 2.0d0*u(4,i,j,k) +
                                               :     >                     u(4,i-1,j,k)) +
                                               :     >                    xxcon2 * (ws(i+1,j,k) - 2.0d0*ws(i,j,k) +
                                               :     >                              ws(i-1,j,k)) -
                                               :     >                    tx2 * (u(4,i+1,j,k)*up1 - 
 28798  1.2894   194  0.9274   221  0.6438     :     >                           u(4,i-1,j,k)*um1)
                                               :
                                               :                rhs(5,i,j,k) = rhs(5,i,j,k) + dx5tx1 * 
                                               :     >                    (u(5,i+1,j,k) - 2.0d0*u(5,i,j,k) +
                                               :     >                     u(5,i-1,j,k)) +
                                               :     >                    xxcon3 * (qs(i+1,j,k) - 2.0d0*qs(i,j,k) +
                                               :     >                              qs(i-1,j,k)) +
                                               :     >                    xxcon4 * (up1*up1 -       2.0d0*uijk*uijk + 
                                               :     >                              um1*um1) +
                                               :     >                    xxcon5 * (u(5,i+1,j,k)*rho_i(i+1,j,k) - 
                                               :     >                              2.0d0*u(5,i,j,k)*rho_i(i,j,k) +
                                               :     >                              u(5,i-1,j,k)*rho_i(i-1,j,k)) -
                                               :     >                    tx2 * ( (c1*u(5,i+1,j,k) - 
                                               :     >                             c2*square(i+1,j,k))*up1 -
                                               :     >                            (c1*u(5,i-1,j,k) - 
 67220  3.0096   479  2.2899   368  1.0720     :     >                             c2*square(i-1,j,k))*um1 )
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      add fourth order xi-direction dissipation               
                                               :c---------------------------------------------------------------------
    17 7.6e-04     0       0     1  0.0029     :          do    j = 1, ny2
                                               :             i = 1
                                               :             do    m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k)- dssp * 
                                               :     >                    ( 5.0d0*u(m,i,j,k) - 4.0d0*u(m,i+1,j,k) +
  1283  0.0574     2  0.0096    29  0.0845     :     >                            u(m,i+2,j,k))
                                               :             end do
                                               :
                                               :             i = 2
                                               :             do    m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp * 
                                               :     >                    (-4.0d0*u(m,i-1,j,k) + 6.0d0*u(m,i,j,k) -
   743  0.0333     0       0     4  0.0117     :     >                      4.0d0*u(m,i+1,j,k) + u(m,i+2,j,k))
                                               :             end do
                                               :          end do
                                               :
    18 8.1e-04     0       0     0       0     :          do    j = 1, ny2
   941  0.0421     0       0    21  0.0612     :             do  i = 3, nx2-2
                                               :                do     m = 1, 5
                                               :                   rhs(m,i,j,k) = rhs(m,i,j,k) - dssp * 
                                               :     >                    (  u(m,i-2,j,k) - 4.0d0*u(m,i-1,j,k) + 
                                               :     >                     6.0*u(m,i,j,k) - 4.0d0*u(m,i+1,j,k) + 
 50506  2.2613    10  0.0478   410  1.1943     :     >                         u(m,i+2,j,k) )
                                               :                end do
                                               :             end do
                                               :          end do
                                               :
   140  0.0063     2  0.0096    11  0.0320     :          do    j = 1, ny2
                                               :             i = nx2-1
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp *
                                               :     >                    ( u(m,i-2,j,k) - 4.0d0*u(m,i-1,j,k) + 
  1505  0.0674     0       0    13  0.0379     :     >                      6.0d0*u(m,i,j,k) - 4.0d0*u(m,i+1,j,k) )
                                               :             end do
                                               :
                                               :             i = nx2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp *
                                               :     >                    ( u(m,i-2,j,k) - 4.d0*u(m,i-1,j,k) +
   557  0.0249     0       0     6  0.0175     :     >                      5.d0*u(m,i,j,k) )
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :!$omp master
     5 2.2e-04     0       0     0       0     :       if (timeron) call timer_stop(t_rhsx)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      compute eta-direction fluxes 
                                               :c---------------------------------------------------------------------
                                               :       if (timeron) call timer_start(t_rhsy)
                                               :!$omp end master
     4 1.8e-04     0       0     0       0     :!$omp do schedule(static)
                                               :       do     k = 1, nz2
    79  0.0035     2  0.0096     1  0.0029     :          do     j = 1, ny2
   913  0.0409    10  0.0478    26  0.0757     :             do     i = 1, nx2
   819  0.0367     6  0.0287     9  0.0262     :                vijk = vs(i,j,k)
  1493  0.0668    24  0.1147    37  0.1078     :                vp1  = vs(i,j+1,k)
   793  0.0355     2  0.0096     5  0.0146     :                vm1  = vs(i,j-1,k)
                                               :                rhs(1,i,j,k) = rhs(1,i,j,k) + dy1ty1 * 
                                               :     >                   (u(1,i,j+1,k) - 2.0d0*u(1,i,j,k) + 
                                               :     >                    u(1,i,j-1,k)) -
 15730  0.7043   225  1.0756   247  0.7195     :     >                   ty2 * (u(3,i,j+1,k) - u(3,i,j-1,k))
                                               :                rhs(2,i,j,k) = rhs(2,i,j,k) + dy2ty1 * 
                                               :     >                   (u(2,i,j+1,k) - 2.0d0*u(2,i,j,k) + 
                                               :     >                    u(2,i,j-1,k)) +
                                               :     >                   yycon2 * (us(i,j+1,k) - 2.0d0*us(i,j,k) + 
                                               :     >                             us(i,j-1,k)) -
                                               :     >                   ty2 * (u(2,i,j+1,k)*vp1 - 
 19511  0.8736   330  1.5776   252  0.7341     :     >                          u(2,i,j-1,k)*vm1)
                                               :                rhs(3,i,j,k) = rhs(3,i,j,k) + dy3ty1 * 
                                               :     >                   (u(3,i,j+1,k) - 2.0d0*u(3,i,j,k) + 
                                               :     >                    u(3,i,j-1,k)) +
                                               :     >                   yycon2*con43 * (vp1 - 2.0d0*vijk + vm1) -
                                               :     >                   ty2 * (u(3,i,j+1,k)*vp1 - 
                                               :     >                          u(3,i,j-1,k)*vm1 +
                                               :     >                          (u(5,i,j+1,k) - square(i,j+1,k) - 
                                               :     >                           u(5,i,j-1,k) + square(i,j-1,k))
 33320  1.4918   455  2.1752   476  1.3866     :     >                          *c2)
                                               :                rhs(4,i,j,k) = rhs(4,i,j,k) + dy4ty1 * 
                                               :     >                   (u(4,i,j+1,k) - 2.0d0*u(4,i,j,k) + 
                                               :     >                    u(4,i,j-1,k)) +
                                               :     >                   yycon2 * (ws(i,j+1,k) - 2.0d0*ws(i,j,k) + 
                                               :     >                             ws(i,j-1,k)) -
                                               :     >                   ty2 * (u(4,i,j+1,k)*vp1 - 
 18770  0.8404   238  1.1378   242  0.7049     :     >                          u(4,i,j-1,k)*vm1)
                                               :                rhs(5,i,j,k) = rhs(5,i,j,k) + dy5ty1 * 
                                               :     >                   (u(5,i,j+1,k) - 2.0d0*u(5,i,j,k) + 
                                               :     >                    u(5,i,j-1,k)) +
                                               :     >                   yycon3 * (qs(i,j+1,k) - 2.0d0*qs(i,j,k) + 
                                               :     >                             qs(i,j-1,k)) +
                                               :     >                   yycon4 * (vp1*vp1       - 2.0d0*vijk*vijk + 
                                               :     >                             vm1*vm1) +
                                               :     >                   yycon5 * (u(5,i,j+1,k)*rho_i(i,j+1,k) - 
                                               :     >                             2.0d0*u(5,i,j,k)*rho_i(i,j,k) +
                                               :     >                             u(5,i,j-1,k)*rho_i(i,j-1,k)) -
                                               :     >                   ty2 * ((c1*u(5,i,j+1,k) - 
                                               :     >                           c2*square(i,j+1,k)) * vp1 -
                                               :     >                          (c1*u(5,i,j-1,k) - 
 47519  2.1276   470  2.2469   463  1.3487     :     >                           c2*square(i,j-1,k)) * vm1)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      add fourth order eta-direction dissipation         
                                               :c---------------------------------------------------------------------
                                               :
                                               :          j = 1
    15 6.7e-04     0       0     0       0     :          do     i = 1, nx2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k)- dssp * 
                                               :     >                    ( 5.0d0*u(m,i,j,k) - 4.0d0*u(m,i,j+1,k) +
   723  0.0324     3  0.0143    22  0.0641     :     >                            u(m,i,j+2,k))
                                               :             end do
                                               :          end do
                                               :
                                               :          j = 2
    25  0.0011     0       0     0       0     :          do     i = 1, nx2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp * 
                                               :     >                    (-4.0d0*u(m,i,j-1,k) + 6.0d0*u(m,i,j,k) -
   751  0.0336     3  0.0143     4  0.0117     :     >                      4.0d0*u(m,i,j+1,k) + u(m,i,j+2,k))
                                               :             end do
                                               :          end do
                                               :
    55  0.0025     0       0     1  0.0029     :          do    j = 3, ny2-2
    24  0.0011     0       0     0       0     :             do  i = 1,nx2
                                               :                do     m = 1, 5
                                               :                   rhs(m,i,j,k) = rhs(m,i,j,k) - dssp * 
                                               :     >                    (  u(m,i,j-2,k) - 4.0d0*u(m,i,j-1,k) + 
                                               :     >                     6.0*u(m,i,j,k) - 4.0d0*u(m,i,j+1,k) + 
 52856  2.3665     9  0.0430   410  1.1943     :     >                         u(m,i,j+2,k) )
                                               :                end do
                                               :             end do
                                               :          end do
                                               : 
                                               :          j = ny2-1
    35  0.0016     0       0     0       0     :          do     i = 1, nx2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp *
                                               :     >                    ( u(m,i,j-2,k) - 4.0d0*u(m,i,j-1,k) + 
  1153  0.0516     0       0     2  0.0058     :     >                      6.0d0*u(m,i,j,k) - 4.0d0*u(m,i,j+1,k) )
                                               :             end do
                                               :          end do
                                               :
                                               :          j = ny2
    30  0.0013     0       0     0       0     :          do     i = 1, nx2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp *
                                               :     >                    ( u(m,i,j-2,k) - 4.d0*u(m,i,j-1,k) +
   962  0.0431     1  0.0048     4  0.0117     :     >                      5.d0*u(m,i,j,k) )
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do
     1 4.5e-05     0       0     0       0     :!$omp master
     2 9.0e-05     0       0     0       0     :       if (timeron) call timer_stop(t_rhsy)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      compute zeta-direction fluxes 
                                               :c---------------------------------------------------------------------
                                               :       if (timeron) call timer_start(t_rhsz)
                                               :!$omp end master
     4 1.8e-04     0       0     0       0     :!$omp do schedule(static)
                                               :       do    k = 1, grid_points(3)-2
   165  0.0074     1  0.0048     7  0.0204     :          do     j = 1, grid_points(2)-2
  1659  0.0743    23  0.1100    82  0.2389     :             do     i = 1, grid_points(1)-2
    10 4.5e-04     1  0.0048     1  0.0029     :                wijk = ws(i,j,k)
  2015  0.0902    32  0.1530    54  0.1573     :                wp1  = ws(i,j,k+1)
    13 5.8e-04     0       0     2  0.0058     :                wm1  = ws(i,j,k-1)
                                               :
                                               :                rhs(1,i,j,k) = rhs(1,i,j,k) + dz1tz1 * 
                                               :     >                   (u(1,i,j,k+1) - 2.0d0*u(1,i,j,k) + 
                                               :     >                    u(1,i,j,k-1)) -
 27090  1.2129   506  2.4190   707  2.0595     :     >                   tz2 * (u(4,i,j,k+1) - u(4,i,j,k-1))
                                               :                rhs(2,i,j,k) = rhs(2,i,j,k) + dz2tz1 * 
                                               :     >                   (u(2,i,j,k+1) - 2.0d0*u(2,i,j,k) + 
                                               :     >                    u(2,i,j,k-1)) +
                                               :     >                   zzcon2 * (us(i,j,k+1) - 2.0d0*us(i,j,k) + 
                                               :     >                             us(i,j,k-1)) -
                                               :     >                   tz2 * (u(2,i,j,k+1)*wp1 - 
 25400  1.1372   578  2.7632   616  1.7944     :     >                          u(2,i,j,k-1)*wm1)
                                               :                rhs(3,i,j,k) = rhs(3,i,j,k) + dz3tz1 * 
                                               :     >                   (u(3,i,j,k+1) - 2.0d0*u(3,i,j,k) + 
                                               :     >                    u(3,i,j,k-1)) +
                                               :     >                   zzcon2 * (vs(i,j,k+1) - 2.0d0*vs(i,j,k) + 
                                               :     >                             vs(i,j,k-1)) -
                                               :     >                   tz2 * (u(3,i,j,k+1)*wp1 - 
 22733  1.0178   423  2.0222   463  1.3487     :     >                          u(3,i,j,k-1)*wm1)
                                               :                rhs(4,i,j,k) = rhs(4,i,j,k) + dz4tz1 * 
                                               :     >                   (u(4,i,j,k+1) - 2.0d0*u(4,i,j,k) + 
                                               :     >                    u(4,i,j,k-1)) +
                                               :     >                   zzcon2*con43 * (wp1 - 2.0d0*wijk + wm1) -
                                               :     >                   tz2 * (u(4,i,j,k+1)*wp1 - 
                                               :     >                          u(4,i,j,k-1)*wm1 +
                                               :     >                          (u(5,i,j,k+1) - square(i,j,k+1) - 
                                               :     >                           u(5,i,j,k-1) + square(i,j,k-1))
 43312  1.9392   833  3.9822   948  2.7615     :     >                          *c2)
                                               :                rhs(5,i,j,k) = rhs(5,i,j,k) + dz5tz1 * 
                                               :     >                   (u(5,i,j,k+1) - 2.0d0*u(5,i,j,k) + 
                                               :     >                    u(5,i,j,k-1)) +
                                               :     >                   zzcon3 * (qs(i,j,k+1) - 2.0d0*qs(i,j,k) + 
                                               :     >                             qs(i,j,k-1)) +
                                               :     >                   zzcon4 * (wp1*wp1 - 2.0d0*wijk*wijk + 
                                               :     >                             wm1*wm1) +
                                               :     >                   zzcon5 * (u(5,i,j,k+1)*rho_i(i,j,k+1) - 
                                               :     >                             2.0d0*u(5,i,j,k)*rho_i(i,j,k) +
                                               :     >                             u(5,i,j,k-1)*rho_i(i,j,k-1)) -
                                               :     >                   tz2 * ( (c1*u(5,i,j,k+1) - 
                                               :     >                            c2*square(i,j,k+1))*wp1 -
                                               :     >                           (c1*u(5,i,j,k-1) - 
 59300  2.6550  1046  5.0005   836  2.4353     :     >                            c2*square(i,j,k-1))*wm1)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      add fourth order zeta-direction dissipation                
                                               :c---------------------------------------------------------------------
                                               :
                                               :       k = 1
     4 1.8e-04     0       0     0       0     :!$omp do schedule(static)
                                               :       do     j = 1, grid_points(2)-2
   112  0.0050     4  0.0191     3  0.0087     :          do     i = 1, grid_points(1)-2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k)- dssp * 
                                               :     >                    ( 5.0d0*u(m,i,j,k) - 4.0d0*u(m,i,j,k+1) +
  1306  0.0585    41  0.1960    21  0.0612     :     >                            u(m,i,j,k+2))
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :       k = 2
                                               :!$omp do schedule(static)
                                               :       do     j = 1, grid_points(2)-2
    27  0.0012     1  0.0048     0       0     :          do     i = 1, grid_points(1)-2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp * 
                                               :     >                    (-4.0d0*u(m,i,j,k-1) + 6.0d0*u(m,i,j,k) -
   886  0.0397    20  0.0956    11  0.0320     :     >                      4.0d0*u(m,i,j,k+1) + u(m,i,j,k+2))
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
     1 4.5e-05     0       0     0       0     :!$omp do schedule(static)
                                               :       do     k = 3, grid_points(3)-4
    69  0.0031     1  0.0048     2  0.0058     :          do     j = 1, grid_points(2)-2
   113  0.0051     2  0.0096     2  0.0058     :             do     i = 1,grid_points(1)-2
                                               :                do     m = 1, 5
                                               :                   rhs(m,i,j,k) = rhs(m,i,j,k) - dssp * 
                                               :     >                    (  u(m,i,j,k-2) - 4.0d0*u(m,i,j,k-1) + 
                                               :     >                     6.0*u(m,i,j,k) - 4.0d0*u(m,i,j,k+1) + 
 92702  4.1505  1937  9.2600  2472  7.2009     :     >                         u(m,i,j,k+2) )
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               : 
                                               :       k = grid_points(3)-3
                                               :!$omp do schedule(static)
                                               :       do     j = 1, grid_points(2)-2
    34  0.0015     0       0     0       0     :          do     i = 1, grid_points(1)-2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp *
                                               :     >                    ( u(m,i,j,k-2) - 4.0d0*u(m,i,j,k-1) + 
  1389  0.0622    28  0.1339    33  0.0961     :     >                      6.0d0*u(m,i,j,k) - 4.0d0*u(m,i,j,k+1) )
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :       k = grid_points(3)-2
                                               :!$omp do schedule(static)
                                               :       do     j = 1, grid_points(2)-2
    22 9.9e-04     0       0     0       0     :          do     i = 1, grid_points(1)-2
                                               :             do     m = 1, 5
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) - dssp *
                                               :     >                    ( u(m,i,j,k-2) - 4.d0*u(m,i,j,k-1) +
   995  0.0445    13  0.0621    14  0.0408     :     >                      5.d0*u(m,i,j,k) )
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do
     1 4.5e-05     0       0     0       0     :!$omp master
     1 4.5e-05     0       0     0       0     :       if (timeron) call timer_stop(t_rhsz)
                                               :!$omp end master
                                               :
                                               :!$omp do schedule(static)
                                               :       do    k = 1, nz2
    40  0.0018     0       0     5  0.0146     :          do    j = 1, ny2
    39  0.0017     0       0     1  0.0029     :             do    i = 1, nx2
                                               :                do    m = 1, 5
 34814  1.5587   521  2.4907   993  2.8926     :                   rhs(m,i,j,k) = rhs(m,i,j,k) * dt
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :!$omp end parallel
     1 4.5e-05     0       0     0       0     :        if (timeron) call timer_stop(t_rhs)
                                               :   
                                               :       return
     1 4.5e-05     0       0     0       0     :       end
                                               :
                                               :
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/z_solve.f"
 * 
 * 334546 14.9786  1687  8.0648  5453 15.8845
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
   161  0.0072     3  0.0143     2  0.0058     :       subroutine z_solve /* z_solve_ total:      4 1.8e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c this function performs the solution of the approximate factorization
                                               :c step in the z-direction for all five matrix components
                                               :c simultaneously. The Thomas algorithm is employed to solve the
                                               :c systems for the z-lines. Boundary conditions are non-periodic
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k, k1, k2, m
                                               :       double precision ru1, fac1, fac2
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c Prepare for z-solve, array redistribution   
                                               :c---------------------------------------------------------------------
                                               :
                                               :       if (timeron) call timer_start(t_zsolve)
                                               :!$omp parallel do default(shared) private(i,j,k,k1,k2,m,
                                               :!$omp&    ru1,fac1,fac2)
                                               :       do   j = 1, ny2
                                               :
    11 4.9e-04     0       0     0       0     :          call lhsinitj(nz2+1, nx2)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c Computes the left hand side for the three z-factors   
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c first fill the lhs for the u-eigenvalue                          
                                               :c---------------------------------------------------------------------
                                               :
    42  0.0019     0       0     2  0.0058     :          do   i = 1, nx2
   456  0.0204     1  0.0048     0       0     :             do   k = 0, nz2 + 1
   835  0.0374     1  0.0048     3  0.0087     :                ru1 = c3c4*rho_i(i,j,k)
  4911  0.2199    35  0.1673   128  0.3729     :                cv(k) = ws(i,j,k)
                                               :                rhos(k) = dmax1(dz4 + con43 * ru1,
                                               :     >                          dz5 + c1c5 * ru1,
                                               :     >                          dzmax + ru1,
 28251  1.2649   262  1.2525   461  1.3429     :     >                          dz1)
                                               :             end do
                                               :
   584  0.0261     1  0.0048    16  0.0466     :             do   k =  1, nz2
  1005  0.0450     1  0.0048    35  0.1020     :                lhs(1,i,k) =  0.0d0
  4702  0.2105    14  0.0669   153  0.4457     :                lhs(2,i,k) = -dttz2 * cv(k-1) - dttz1 * rhos(k-1)
  2145  0.0960     9  0.0430    49  0.1427     :                lhs(3,i,k) =  1.0 + c2dttz1 * rhos(k)
  7063  0.3162    21  0.1004   138  0.4020     :                lhs(4,i,k) =  dttz2 * cv(k+1) - dttz1 * rhos(k+1)
   521  0.0233     1  0.0048    10  0.0291     :                lhs(5,i,k) =  0.0d0
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      add fourth order dissipation                                  
                                               :c---------------------------------------------------------------------
                                               :
    25  0.0011     0       0     0       0     :          do   i = 1, nx2
                                               :             k = 1
    76  0.0034     0       0     0       0     :             lhs(3,i,k) = lhs(3,i,k) + comz5
    59  0.0026     0       0     1  0.0029     :             lhs(4,i,k) = lhs(4,i,k) - comz4
    57  0.0026     0       0     1  0.0029     :             lhs(5,i,k) = lhs(5,i,k) + comz1
                                               :
                                               :             k = 2
    56  0.0025     0       0     2  0.0058     :             lhs(2,i,k) = lhs(2,i,k) - comz4
    34  0.0015     0       0     0       0     :             lhs(3,i,k) = lhs(3,i,k) + comz6
    39  0.0017     0       0     0       0     :             lhs(4,i,k) = lhs(4,i,k) - comz4
    57  0.0026     0       0     2  0.0058     :             lhs(5,i,k) = lhs(5,i,k) + comz1
                                               :          end do
                                               :
   120  0.0054     0       0     0       0     :          do    k = 3, nz2-2
   466  0.0209     0       0     1  0.0029     :             do   i = 1, nx2
  2945  0.1319     0       0    58  0.1690     :                lhs(1,i,k) = lhs(1,i,k) + comz1
  2005  0.0898     0       0    34  0.0990     :                lhs(2,i,k) = lhs(2,i,k) - comz4
  2462  0.1102     0       0    39  0.1136     :                lhs(3,i,k) = lhs(3,i,k) + comz6
  2355  0.1054     1  0.0048    38  0.1107     :                lhs(4,i,k) = lhs(4,i,k) - comz4
  2620  0.1173     1  0.0048    45  0.1311     :                lhs(5,i,k) = lhs(5,i,k) + comz1
                                               :             end do
                                               :          end do
                                               :
    13 5.8e-04     0       0     1  0.0029     :          do   i = 1, nx2
     1 4.5e-05     0       0     0       0     :             k = nz2-1
   100  0.0045     1  0.0048     4  0.0117     :             lhs(1,i,k) = lhs(1,i,k) + comz1
    53  0.0024     0       0     1  0.0029     :             lhs(2,i,k) = lhs(2,i,k) - comz4
    48  0.0021     0       0     2  0.0058     :             lhs(3,i,k) = lhs(3,i,k) + comz6
    30  0.0013     0       0     0       0     :             lhs(4,i,k) = lhs(4,i,k) - comz4
                                               :
                                               :             k = nz2
    64  0.0029     0       0     2  0.0058     :             lhs(1,i,k) = lhs(1,i,k) + comz1
    75  0.0034     0       0     1  0.0029     :             lhs(2,i,k) = lhs(2,i,k) - comz4
    49  0.0022     0       0     0       0     :             lhs(3,i,k) = lhs(3,i,k) + comz5
                                               :          end do
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      subsequently, fill the other factors (u+c), (u-c) 
                                               :c---------------------------------------------------------------------
    28  0.0013     0       0     1  0.0029     :          do    k = 1, nz2
   933  0.0418     7  0.0335    35  0.1020     :             do   i = 1, nx2
  2922  0.1308    33  0.1578   141  0.4107     :                lhsp(1,i,k) = lhs(1,i,k)
                                               :                lhsp(2,i,k) = lhs(2,i,k) - 
  7016  0.3141    65  0.3107   176  0.5127     :     >                            dttz2 * speed(i,j,k-1)
  2406  0.1077    28  0.1339    73  0.2126     :                lhsp(3,i,k) = lhs(3,i,k)
                                               :                lhsp(4,i,k) = lhs(4,i,k) + 
 10632  0.4760    92  0.4398   263  0.7661     :     >                            dttz2 * speed(i,j,k+1)
  3253  0.1456    36  0.1721    92  0.2680     :                lhsp(5,i,k) = lhs(5,i,k)
  1411  0.0632    12  0.0574    70  0.2039     :                lhsm(1,i,k) = lhs(1,i,k)
                                               :                lhsm(2,i,k) = lhs(2,i,k) + 
  2311  0.1035    26  0.1243    88  0.2563     :     >                            dttz2 * speed(i,j,k-1)
  1049  0.0470    17  0.0813    28  0.0816     :                lhsm(3,i,k) = lhs(3,i,k)
                                               :                lhsm(4,i,k) = lhs(4,i,k) - 
  2314  0.1036    24  0.1147    73  0.2126     :     >                            dttz2 * speed(i,j,k+1)
   981  0.0439    11  0.0526    42  0.1223     :                lhsm(5,i,k) = lhs(5,i,k)
                                               :             end do
                                               :          end do
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c                          FORWARD ELIMINATION  
                                               :c---------------------------------------------------------------------
                                               :
   225  0.0101     8  0.0382     3  0.0087     :          do    k = 0, grid_points(3)-3
                                               :             k1 = k  + 1
                                               :             k2 = k  + 2
   801  0.0359     3  0.0143    28  0.0816     :             do   i = 1, nx2
 22748  1.0185   406  1.9409   273  0.7952     :                fac1      = 1.d0/lhs(3,i,k)
  2378  0.1065    12  0.0574     8  0.0233     :                lhs(4,i,k)  = fac1*lhs(4,i,k)
  3348  0.1499    26  0.1243    33  0.0961     :                lhs(5,i,k)  = fac1*lhs(5,i,k)
                                               :                do    m = 1, 3
  4773  0.2137    26  0.1243    22  0.0641     :                   rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                end do
                                               :                lhs(3,i,k1) = lhs(3,i,k1) -
  3227  0.1445     9  0.0430     3  0.0087     :     >                         lhs(2,i,k1)*lhs(4,i,k)
                                               :                lhs(4,i,k1) = lhs(4,i,k1) -
  3125  0.1399     4  0.0191     7  0.0204     :     >                         lhs(2,i,k1)*lhs(5,i,k)
                                               :                do    m = 1, 3
                                               :                   rhs(m,i,j,k1) = rhs(m,i,j,k1) -
  7211  0.3229     6  0.0287    68  0.1981     :     >                         lhs(2,i,k1)*rhs(m,i,j,k)
                                               :                end do
                                               :                lhs(2,i,k2) = lhs(2,i,k2) -
  6445  0.2886    20  0.0956    97  0.2826     :     >                         lhs(1,i,k2)*lhs(4,i,k)
                                               :                lhs(3,i,k2) = lhs(3,i,k2) -
  2571  0.1151     5  0.0239     9  0.0262     :     >                         lhs(1,i,k2)*lhs(5,i,k)
                                               :                do    m = 1, 3
                                               :                   rhs(m,i,j,k2) = rhs(m,i,j,k2) -
 23386  1.0471   181  0.8653   302  0.8797     :     >                         lhs(1,i,k2)*rhs(m,i,j,k)
                                               :                end do
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      The last two rows in this grid block are a bit different, 
                                               :c      since they do not have two more rows available for the
                                               :c      elimination of off-diagonal entries
                                               :c---------------------------------------------------------------------
                                               :          k  = grid_points(3)-2
                                               :          k1 = grid_points(3)-1
    30  0.0013     0       0     0       0     :          do   i = 1, nx2
    20 9.0e-04     0       0     1  0.0029     :             fac1      = 1.d0/lhs(3,i,k)
    51  0.0023     0       0     0       0     :             lhs(4,i,k)  = fac1*lhs(4,i,k)
    38  0.0017     0       0     0       0     :             lhs(5,i,k)  = fac1*lhs(5,i,k)
                                               :             do    m = 1, 3
   118  0.0053     0       0     0       0     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             end do
                                               :             lhs(3,i,k1) = lhs(3,i,k1) -
   432  0.0193     0       0     0       0     :     >                      lhs(2,i,k1)*lhs(4,i,k)
                                               :             lhs(4,i,k1) = lhs(4,i,k1) -
    24  0.0011     0       0     0       0     :     >                      lhs(2,i,k1)*lhs(5,i,k)
                                               :             do    m = 1, 3
                                               :                rhs(m,i,j,k1) = rhs(m,i,j,k1) -
   133  0.0060     0       0     0       0     :     >                      lhs(2,i,k1)*rhs(m,i,j,k)
                                               :             end do
                                               :c---------------------------------------------------------------------
                                               :c               scale the last row immediately
                                               :c---------------------------------------------------------------------
   381  0.0171     0       0     0       0     :             fac2      = 1.d0/lhs(3,i,k1)
                                               :             do    m = 1, 3
   118  0.0053     0       0     0       0     :                rhs(m,i,j,k1) = fac2*rhs(m,i,j,k1)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      do the u+c and the u-c factors               
                                               :c---------------------------------------------------------------------
   185  0.0083     0       0     6  0.0175     :          do    k = 0, grid_points(3)-3
   142  0.0064     0       0     9  0.0262     :             k1 = k  + 1
                                               :             k2 = k  + 2
   968  0.0433     0       0     1  0.0029     :             do   i = 1, nx2
                                               :                m = 4
 23436  1.0493    62  0.2964   345  1.0050     :                fac1       = 1.d0/lhsp(3,i,k)
  3406  0.1525     7  0.0335    22  0.0641     :                lhsp(4,i,k)  = fac1*lhsp(4,i,k)
  3630  0.1625     4  0.0191     3  0.0087     :                lhsp(5,i,k)  = fac1*lhsp(5,i,k)
  2369  0.1061     2  0.0096    12  0.0350     :                rhs(m,i,j,k)  = fac1*rhs(m,i,j,k)
                                               :                lhsp(3,i,k1) = lhsp(3,i,k1) -
  2202  0.0986     3  0.0143     2  0.0058     :     >                       lhsp(2,i,k1)*lhsp(4,i,k)
                                               :                lhsp(4,i,k1) = lhsp(4,i,k1) -
  4732  0.2119     2  0.0096     3  0.0087     :     >                       lhsp(2,i,k1)*lhsp(5,i,k)
                                               :                rhs(m,i,j,k1) = rhs(m,i,j,k1) -
  3428  0.1535     3  0.0143     4  0.0117     :     >                       lhsp(2,i,k1)*rhs(m,i,j,k)
                                               :                lhsp(2,i,k2) = lhsp(2,i,k2) -
  7211  0.3229    15  0.0717    94  0.2738     :     >                       lhsp(1,i,k2)*lhsp(4,i,k)
                                               :                lhsp(3,i,k2) = lhsp(3,i,k2) -
  2911  0.1303     2  0.0096   137  0.3991     :     >                       lhsp(1,i,k2)*lhsp(5,i,k)
                                               :                rhs(m,i,j,k2) = rhs(m,i,j,k2) -
 24127  1.0802    52  0.2486   341  0.9933     :     >                       lhsp(1,i,k2)*rhs(m,i,j,k)
                                               :                m = 5
  1094  0.0490     0       0    33  0.0961     :                fac1       = 1.d0/lhsm(3,i,k)
  2411  0.1079     1  0.0048    11  0.0320     :                lhsm(4,i,k)  = fac1*lhsm(4,i,k)
  3616  0.1619    10  0.0478    27  0.0787     :                lhsm(5,i,k)  = fac1*lhsm(5,i,k)
  1960  0.0878     2  0.0096     7  0.0204     :                rhs(m,i,j,k)  = fac1*rhs(m,i,j,k)
                                               :                lhsm(3,i,k1) = lhsm(3,i,k1) -
  2624  0.1175     0       0     5  0.0146     :     >                       lhsm(2,i,k1)*lhsm(4,i,k)
                                               :                lhsm(4,i,k1) = lhsm(4,i,k1) -
  4788  0.2144     0       0     4  0.0117     :     >                       lhsm(2,i,k1)*lhsm(5,i,k)
                                               :                rhs(m,i,j,k1) = rhs(m,i,j,k1) -
  3732  0.1671     0       0     0       0     :     >                       lhsm(2,i,k1)*rhs(m,i,j,k)
                                               :                lhsm(2,i,k2) = lhsm(2,i,k2) -
  5415  0.2424    14  0.0669    56  0.1631     :     >                       lhsm(1,i,k2)*lhsm(4,i,k)
                                               :                lhsm(3,i,k2) = lhsm(3,i,k2) -
  2904  0.1300     2  0.0096   119  0.3466     :     >                       lhsm(1,i,k2)*lhsm(5,i,k)
                                               :                rhs(m,i,j,k2) = rhs(m,i,j,k2) -
  4376  0.1959     5  0.0239    50  0.1456     :     >                       lhsm(1,i,k2)*rhs(m,i,j,k)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c         And again the last two rows separately
                                               :c---------------------------------------------------------------------
                                               :          k  = grid_points(3)-2
                                               :          k1 = grid_points(3)-1
    21 9.4e-04     0       0     0       0     :          do   i = 1, nx2
                                               :             m = 4
     9 4.0e-04     0       0     0       0     :             fac1       = 1.d0/lhsp(3,i,k)
    42  0.0019     0       0     0       0     :             lhsp(4,i,k)  = fac1*lhsp(4,i,k)
    71  0.0032     0       0     0       0     :             lhsp(5,i,k)  = fac1*lhsp(5,i,k)
    25  0.0011     0       0     0       0     :             rhs(m,i,j,k)  = fac1*rhs(m,i,j,k)
                                               :             lhsp(3,i,k1) = lhsp(3,i,k1) -
    52  0.0023     0       0     0       0     :     >                    lhsp(2,i,k1)*lhsp(4,i,k)
                                               :             lhsp(4,i,k1) = lhsp(4,i,k1) -
    73  0.0033     0       0     0       0     :     >                    lhsp(2,i,k1)*lhsp(5,i,k)
                                               :             rhs(m,i,j,k1) = rhs(m,i,j,k1) -
    42  0.0019     0       0     0       0     :     >                    lhsp(2,i,k1)*rhs(m,i,j,k)
                                               :             m = 5
   362  0.0162     0       0     1  0.0029     :             fac1       = 1.d0/lhsm(3,i,k)
   382  0.0171     0       0     0       0     :             lhsm(4,i,k)  = fac1*lhsm(4,i,k)
    68  0.0030     0       0     0       0     :             lhsm(5,i,k)  = fac1*lhsm(5,i,k)
    36  0.0016     0       0     0       0     :             rhs(m,i,j,k)  = fac1*rhs(m,i,j,k)
                                               :             lhsm(3,i,k1) = lhsm(3,i,k1) -
    47  0.0021     0       0     0       0     :     >                    lhsm(2,i,k1)*lhsm(4,i,k)
                                               :             lhsm(4,i,k1) = lhsm(4,i,k1) -
    33  0.0015     0       0     0       0     :     >                    lhsm(2,i,k1)*lhsm(5,i,k)
                                               :             rhs(m,i,j,k1) = rhs(m,i,j,k1) -
   144  0.0064     0       0     0       0     :     >                    lhsm(2,i,k1)*rhs(m,i,j,k)
                                               :c---------------------------------------------------------------------
                                               :c               Scale the last row immediately (some of this is overkill
                                               :c               if this is the last cell)
                                               :c---------------------------------------------------------------------
   151  0.0068     0       0     0       0     :             rhs(4,i,j,k1) = rhs(4,i,j,k1)/lhsp(3,i,k1)
    10 4.5e-04     0       0     0       0     :             rhs(5,i,j,k1) = rhs(5,i,j,k1)/lhsm(3,i,k1)
                                               :          end do
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c                         BACKSUBSTITUTION 
                                               :c---------------------------------------------------------------------
                                               :
                                               :          k  = grid_points(3)-2
                                               :          k1 = grid_points(3)-1
    46  0.0021     0       0     0       0     :          do   i = 1, nx2
                                               :             do   m = 1, 3
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) -
   255  0.0114     1  0.0048     1  0.0029     :     >                             lhs(4,i,k)*rhs(m,i,j,k1)
                                               :             end do
                                               :
                                               :             rhs(4,i,j,k) = rhs(4,i,j,k) -
    64  0.0029     1  0.0048     0       0     :     >                             lhsp(4,i,k)*rhs(4,i,j,k1)
                                               :             rhs(5,i,j,k) = rhs(5,i,j,k) -
    70  0.0031     0       0     0       0     :     >                             lhsm(4,i,k)*rhs(5,i,j,k1)
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      Whether or not this is the last processor, we always have
                                               :c      to complete the back-substitution 
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      The first three factors
                                               :c---------------------------------------------------------------------
   198  0.0089     0       0     6  0.0175     :          do   k = grid_points(3)-3, 0, -1 /* z_solve_._omp_fn.0 total: 334542 14.9784  1687  8.0648  5453 15.8845 */
                                               :             k1 = k  + 1
                                               :             k2 = k  + 2
  1225  0.0548     3  0.0143     3  0.0087     :             do   i = 1, nx2
                                               :                do   m = 1, 3
                                               :                   rhs(m,i,j,k) = rhs(m,i,j,k) - 
                                               :     >                          lhs(4,i,k)*rhs(m,i,j,k1) -
 21494  0.9623    39  0.1864   643  1.8731     :     >                          lhs(5,i,k)*rhs(m,i,j,k2)
                                               :                end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      And the remaining two
                                               :c---------------------------------------------------------------------
                                               :                rhs(4,i,j,k) = rhs(4,i,j,k) - 
                                               :     >                          lhsp(4,i,k)*rhs(4,i,j,k1) -
  7583  0.3395    21  0.1004   155  0.4515     :     >                          lhsp(5,i,k)*rhs(4,i,j,k2)
                                               :                rhs(5,i,j,k) = rhs(5,i,j,k) - 
                                               :     >                          lhsm(4,i,k)*rhs(5,i,j,k1) -
  9037  0.4046    27  0.1291   188  0.5476     :     >                          lhsm(5,i,k)*rhs(5,i,j,k2)
                                               :             end do
                                               :          end do
                                               :
                                               :       end do
     2 9.0e-05     0       0     0       0     :       if (timeron) call timer_stop(t_zsolve)
                                               :
                                               :       call tzetar
                                               :
                                               :       return
     2 9.0e-05     0       0     0       0     :       end
                                               :
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/y_solve.f"
 * 
 * 309503 13.8573  1152  5.5072  4377 12.7502
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
   137  0.0061     1  0.0048     4  0.0117     :       subroutine y_solve /* y_solve_ total:      6 2.7e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c this function performs the solution of the approximate factorization
                                               :c step in the y-direction for all five matrix components
                                               :c simultaneously. The Thomas algorithm is employed to solve the
                                               :c systems for the y-lines. Boundary conditions are non-periodic
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k, j1, j2, m
                                               :       double precision ru1, fac1, fac2
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       if (timeron) call timer_start(t_ysolve)
                                               :!$omp parallel do default(shared) private(i,j,k,j1,j2,m,
                                               :!$omp&    ru1,fac1,fac2)
                                               :       do  k = 1, nz2
                                               :
    47  0.0021     0       0     0       0     :          call lhsinitj(ny2+1, nx2)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c Computes the left hand side for the three y-factors   
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      first fill the lhs for the u-eigenvalue         
                                               :c---------------------------------------------------------------------
                                               :
    15 6.7e-04     0       0     0       0     :          do  i = 1, grid_points(1)-2
   479  0.0214     1  0.0048     3  0.0087     :             do  j = 0, grid_points(2)-1
   800  0.0358     0       0     3  0.0087     :                ru1 = c3c4*rho_i(i,j,k)
  4035  0.1807    28  0.1339    43  0.1253     :                cv(j) = vs(i,j,k)
                                               :                rhoq(j) = dmax1( dy3 + con43 * ru1,
                                               :     >                           dy5 + c1c5*ru1,
                                               :     >                           dymax + ru1,
 27045  1.2109   211  1.0087   177  0.5156     :     >                           dy1)
                                               :             end do
                                               :            
   395  0.0177     2  0.0096     5  0.0146     :             do  j = 1, grid_points(2)-2
  1969  0.0882     8  0.0382    33  0.0961     :                lhs(1,i,j) =  0.0d0
  3399  0.1522    13  0.0621    96  0.2796     :                lhs(2,i,j) = -dtty2 * cv(j-1) - dtty1 * rhoq(j-1)
  1828  0.0818     4  0.0191    51  0.1486     :                lhs(3,i,j) =  1.0 + c2dtty1 * rhoq(j)
  6426  0.2877    14  0.0669   108  0.3146     :                lhs(4,i,j) =  dtty2 * cv(j+1) - dtty1 * rhoq(j+1)
   818  0.0366     3  0.0143    18  0.0524     :                lhs(5,i,j) =  0.0d0
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      add fourth order dissipation                             
                                               :c---------------------------------------------------------------------
                                               :
    23  0.0010     0       0     0       0     :          do  i = 1, grid_points(1)-2
                                               :             j = 1
    58  0.0026     0       0     1  0.0029     :             lhs(3,i,j) = lhs(3,i,j) + comz5
    47  0.0021     0       0     2  0.0058     :             lhs(4,i,j) = lhs(4,i,j) - comz4
    50  0.0022     0       0     1  0.0029     :             lhs(5,i,j) = lhs(5,i,j) + comz1
                                               :       
    48  0.0021     0       0     3  0.0087     :             lhs(2,i,j+1) = lhs(2,i,j+1) - comz4
    60  0.0027     0       0     1  0.0029     :             lhs(3,i,j+1) = lhs(3,i,j+1) + comz6
    44  0.0020     0       0     0       0     :             lhs(4,i,j+1) = lhs(4,i,j+1) - comz4
    49  0.0022     0       0     0       0     :             lhs(5,i,j+1) = lhs(5,i,j+1) + comz1
                                               :          end do
                                               :
   126  0.0056     0       0     0       0     :          do   j=3, grid_points(2)-4
   428  0.0192     0       0     3  0.0087     :             do  i = 1, grid_points(1)-2
                                               :
  2998  0.1342     0       0    54  0.1573     :                lhs(1,i,j) = lhs(1,i,j) + comz1
  2046  0.0916     0       0    34  0.0990     :                lhs(2,i,j) = lhs(2,i,j) - comz4
  2509  0.1123     0       0    35  0.1020     :                lhs(3,i,j) = lhs(3,i,j) + comz6
  2415  0.1081     0       0    40  0.1165     :                lhs(4,i,j) = lhs(4,i,j) - comz4
  2690  0.1204     0       0    35  0.1020     :                lhs(5,i,j) = lhs(5,i,j) + comz1
                                               :             end do
                                               :          end do
                                               :
    15 6.7e-04     0       0     0       0     :          do  i = 1, grid_points(1)-2
                                               :             j = grid_points(2)-3
    58  0.0026     0       0     1  0.0029     :             lhs(1,i,j) = lhs(1,i,j) + comz1
    42  0.0019     0       0     1  0.0029     :             lhs(2,i,j) = lhs(2,i,j) - comz4
    45  0.0020     0       0     1  0.0029     :             lhs(3,i,j) = lhs(3,i,j) + comz6
    37  0.0017     0       0     0       0     :             lhs(4,i,j) = lhs(4,i,j) - comz4
                                               :
    45  0.0020     0       0     3  0.0087     :             lhs(1,i,j+1) = lhs(1,i,j+1) + comz1
    60  0.0027     0       0     0       0     :             lhs(2,i,j+1) = lhs(2,i,j+1) - comz4
    42  0.0019     1  0.0048     1  0.0029     :             lhs(3,i,j+1) = lhs(3,i,j+1) + comz5
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      subsequently, do the other two factors                    
                                               :c---------------------------------------------------------------------
    17 7.6e-04     0       0     0       0     :          do    j = 1, grid_points(2)-2
   862  0.0386     3  0.0143    38  0.1107     :             do  i = 1, grid_points(1)-2
  2879  0.1289    23  0.1100   113  0.3292     :                lhsp(1,i,j) = lhs(1,i,j)
                                               :                lhsp(2,i,j) = lhs(2,i,j) - 
  4973  0.2227    33  0.1578   141  0.4107     :     >                            dtty2 * speed(i,j-1,k)
  2367  0.1060    18  0.0861    68  0.1981     :                lhsp(3,i,j) = lhs(3,i,j)
                                               :                lhsp(4,i,j) = lhs(4,i,j) + 
  5419  0.2426    45  0.2151   193  0.5622     :     >                            dtty2 * speed(i,j+1,k)
  3029  0.1356    27  0.1291    84  0.2447     :                lhsp(5,i,j) = lhs(5,i,j)
  1348  0.0604    11  0.0526    55  0.1602     :                lhsm(1,i,j) = lhs(1,i,j)
                                               :                lhsm(2,i,j) = lhs(2,i,j) + 
  2257  0.1011    13  0.0621    82  0.2389     :     >                            dtty2 * speed(i,j-1,k)
   992  0.0444     5  0.0239    31  0.0903     :                lhsm(3,i,j) = lhs(3,i,j)
                                               :                lhsm(4,i,j) = lhs(4,i,j) - 
  2025  0.0907    23  0.1100    59  0.1719     :     >                            dtty2 * speed(i,j+1,k)
   972  0.0435     8  0.0382    42  0.1223     :                lhsm(5,i,j) = lhs(5,i,j)
                                               :             end do
                                               :          end do
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c                          FORWARD ELIMINATION  
                                               :c---------------------------------------------------------------------
                                               :
   124  0.0056     0       0     4  0.0117     :          do    j = 0, grid_points(2)-3
                                               :             j1 = j  + 1
                                               :             j2 = j  + 2
   842  0.0377     2  0.0096    21  0.0612     :             do  i = 1, grid_points(1)-2
 23576  1.0556   363  1.7353   254  0.7399     :                fac1      = 1.d0/lhs(3,i,j)
  2415  0.1081    11  0.0526     7  0.0204     :                lhs(4,i,j)  = fac1*lhs(4,i,j)
  3484  0.1560    26  0.1243    34  0.0990     :                lhs(5,i,j)  = fac1*lhs(5,i,j)
                                               :                do    m = 1, 3
  5090  0.2279    20  0.0956    10  0.0291     :                   rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                end do
                                               :                lhs(3,i,j1) = lhs(3,i,j1) -
  3558  0.1593     5  0.0239     7  0.0204     :     >                         lhs(2,i,j1)*lhs(4,i,j)
                                               :                lhs(4,i,j1) = lhs(4,i,j1) -
  3146  0.1409     4  0.0191     3  0.0087     :     >                         lhs(2,i,j1)*lhs(5,i,j)
                                               :                do    m = 1, 3
                                               :                   rhs(m,i,j1,k) = rhs(m,i,j1,k) -
  7375  0.3302     4  0.0191    77  0.2243     :     >                         lhs(2,i,j1)*rhs(m,i,j,k)
                                               :                end do
                                               :                lhs(2,i,j2) = lhs(2,i,j2) -
  5851  0.2620    12  0.0574    84  0.2447     :     >                         lhs(1,i,j2)*lhs(4,i,j)
                                               :                lhs(3,i,j2) = lhs(3,i,j2) -
  2596  0.1162     3  0.0143     7  0.0204     :     >                         lhs(1,i,j2)*lhs(5,i,j)
                                               :                do    m = 1, 3
                                               :                   rhs(m,i,j2,k) = rhs(m,i,j2,k) -
 14810  0.6631    72  0.3442   281  0.8185     :     >                         lhs(1,i,j2)*rhs(m,i,j,k)
                                               :                end do
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      The last two rows in this grid block are a bit different, 
                                               :c      since they do not have two more rows available for the
                                               :c      elimination of off-diagonal entries
                                               :c---------------------------------------------------------------------
                                               :
                                               :          j  = grid_points(2)-2
                                               :          j1 = grid_points(2)-1
    31  0.0014     0       0     0       0     :          do  i = 1, grid_points(1)-2
    21 9.4e-04     0       0     0       0     :             fac1      = 1.d0/lhs(3,i,j)
    50  0.0022     0       0     0       0     :             lhs(4,i,j)  = fac1*lhs(4,i,j)
    32  0.0014     0       0     0       0     :             lhs(5,i,j)  = fac1*lhs(5,i,j)
                                               :             do    m = 1, 3
   127  0.0057     0       0     0       0     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             end do
                                               :             lhs(3,i,j1) = lhs(3,i,j1) -
   479  0.0214     0       0     1  0.0029     :     >                      lhs(2,i,j1)*lhs(4,i,j)
                                               :             lhs(4,i,j1) = lhs(4,i,j1) -
    35  0.0016     0       0     0       0     :     >                      lhs(2,i,j1)*lhs(5,i,j)
                                               :             do    m = 1, 3
                                               :                rhs(m,i,j1,k) = rhs(m,i,j1,k) -
   237  0.0106     3  0.0143     1  0.0029     :     >                      lhs(2,i,j1)*rhs(m,i,j,k)
                                               :             end do
                                               :c---------------------------------------------------------------------
                                               :c            scale the last row immediately 
                                               :c---------------------------------------------------------------------
   374  0.0167     0       0     0       0     :             fac2      = 1.d0/lhs(3,i,j1)
                                               :             do    m = 1, 3
   115  0.0051     0       0     0       0     :                rhs(m,i,j1,k) = fac2*rhs(m,i,j1,k)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      do the u+c and the u-c factors                 
                                               :c---------------------------------------------------------------------
   187  0.0084     1  0.0048     2  0.0058     :          do    j = 0, grid_points(2)-3
   191  0.0086     0       0     9  0.0262     :             j1 = j  + 1
                                               :             j2 = j  + 2
   915  0.0410     0       0     5  0.0146     :             do  i = 1, grid_points(1)-2
                                               :                m = 4
 23535  1.0537    26  0.1243   175  0.5098     :                fac1       = 1.d0/lhsp(3,i,j)
  2387  0.1069     0       0     5  0.0146     :                lhsp(4,i,j)  = fac1*lhsp(4,i,j)
  4338  0.1942     6  0.0287    20  0.0583     :                lhsp(5,i,j)  = fac1*lhsp(5,i,j)
  2374  0.1063     0       0     1  0.0029     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                lhsp(3,i,j1) = lhsp(3,i,j1) -
  2061  0.0923     0       0     1  0.0029     :     >                       lhsp(2,i,j1)*lhsp(4,i,j)
                                               :                lhsp(4,i,j1) = lhsp(4,i,j1) -
  4728  0.2117     0       0     8  0.0233     :     >                       lhsp(2,i,j1)*lhsp(5,i,j)
                                               :                rhs(m,i,j1,k) = rhs(m,i,j1,k) -
  2534  0.1135     1  0.0048     1  0.0029     :     >                       lhsp(2,i,j1)*rhs(m,i,j,k)
                                               :                lhsp(2,i,j2) = lhsp(2,i,j2) -
  6125  0.2742     5  0.0239    95  0.2767     :     >                       lhsp(1,i,j2)*lhsp(4,i,j)
                                               :                lhsp(3,i,j2) = lhsp(3,i,j2) -
  2884  0.1291     1  0.0048   125  0.3641     :     >                       lhsp(1,i,j2)*lhsp(5,i,j)
                                               :                rhs(m,i,j2,k) = rhs(m,i,j2,k) -
 23637  1.0583    30  0.1434   294  0.8564     :     >                       lhsp(1,i,j2)*rhs(m,i,j,k)
                                               :                m = 5
  1061  0.0475     0       0    47  0.1369     :                fac1       = 1.d0/lhsm(3,i,j)
  2504  0.1121     0       0     2  0.0058     :                lhsm(4,i,j)  = fac1*lhsm(4,i,j)
  3647  0.1633     3  0.0143    15  0.0437     :                lhsm(5,i,j)  = fac1*lhsm(5,i,j)
  1939  0.0868     1  0.0048     6  0.0175     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                lhsm(3,i,j1) = lhsm(3,i,j1) -
  2575  0.1153     1  0.0048     2  0.0058     :     >                       lhsm(2,i,j1)*lhsm(4,i,j)
                                               :                lhsm(4,i,j1) = lhsm(4,i,j1) -
  4652  0.2083     0       0     1  0.0029     :     >                       lhsm(2,i,j1)*lhsm(5,i,j)
                                               :                rhs(m,i,j1,k) = rhs(m,i,j1,k) -
  3925  0.1757     1  0.0048     0       0     :     >                       lhsm(2,i,j1)*rhs(m,i,j,k)
                                               :                lhsm(2,i,j2) = lhsm(2,i,j2) -
  4647  0.2081     6  0.0287    54  0.1573     :     >                       lhsm(1,i,j2)*lhsm(4,i,j)
                                               :                lhsm(3,i,j2) = lhsm(3,i,j2) -
  2813  0.1259     2  0.0096   149  0.4340     :     >                       lhsm(1,i,j2)*lhsm(5,i,j)
                                               :                rhs(m,i,j2,k) = rhs(m,i,j2,k) -
  4082  0.1828     2  0.0096    41  0.1194     :     >                       lhsm(1,i,j2)*rhs(m,i,j,k)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c         And again the last two rows separately
                                               :c---------------------------------------------------------------------
                                               :          j  = grid_points(2)-2
                                               :          j1 = grid_points(2)-1
    19 8.5e-04     0       0     0       0     :          do  i = 1, grid_points(1)-2
                                               :             m = 4
    18 8.1e-04     0       0     0       0     :             fac1       = 1.d0/lhsp(3,i,j)
    48  0.0021     0       0     0       0     :             lhsp(4,i,j)  = fac1*lhsp(4,i,j)
    57  0.0026     0       0     0       0     :             lhsp(5,i,j)  = fac1*lhsp(5,i,j)
    28  0.0013     0       0     0       0     :             rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             lhsp(3,i,j1) = lhsp(3,i,j1) -
    53  0.0024     0       0     0       0     :     >                    lhsp(2,i,j1)*lhsp(4,i,j)
                                               :             lhsp(4,i,j1) = lhsp(4,i,j1) -
    64  0.0029     0       0     0       0     :     >                    lhsp(2,i,j1)*lhsp(5,i,j)
                                               :             rhs(m,i,j1,k)   = rhs(m,i,j1,k) -
    62  0.0028     0       0     0       0     :     >                    lhsp(2,i,j1)*rhs(m,i,j,k)
                                               :             m = 5
   377  0.0169     0       0     0       0     :             fac1       = 1.d0/lhsm(3,i,j)
   363  0.0163     0       0     0       0     :             lhsm(4,i,j)  = fac1*lhsm(4,i,j)
    66  0.0030     0       0     0       0     :             lhsm(5,i,j)  = fac1*lhsm(5,i,j)
    24  0.0011     0       0     0       0     :             rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             lhsm(3,i,j1) = lhsm(3,i,j1) -
    39  0.0017     0       0     0       0     :     >                    lhsm(2,i,j1)*lhsm(4,i,j)
                                               :             lhsm(4,i,j1) = lhsm(4,i,j1) -
    31  0.0014     0       0     0       0     :     >                    lhsm(2,i,j1)*lhsm(5,i,j)
                                               :             rhs(m,i,j1,k)   = rhs(m,i,j1,k) -
   136  0.0061     0       0     0       0     :     >                    lhsm(2,i,j1)*rhs(m,i,j,k)
                                               :c---------------------------------------------------------------------
                                               :c               Scale the last row immediately 
                                               :c---------------------------------------------------------------------
   136  0.0061     0       0     0       0     :             rhs(4,i,j1,k)   = rhs(4,i,j1,k)/lhsp(3,i,j1)
    25  0.0011     0       0     0       0     :             rhs(5,i,j1,k)   = rhs(5,i,j1,k)/lhsm(3,i,j1)
                                               :          end do
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c                         BACKSUBSTITUTION 
                                               :c---------------------------------------------------------------------
                                               :
                                               :          j  = grid_points(2)-2
                                               :          j1 = grid_points(2)-1
    23  0.0010     0       0     0       0     :          do  i = 1, grid_points(1)-2
                                               :             do   m = 1, 3
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) -
   207  0.0093     0       0     8  0.0233     :     >                           lhs(4,i,j)*rhs(m,i,j1,k)
                                               :             end do
                                               :
                                               :             rhs(4,i,j,k) = rhs(4,i,j,k) -
    56  0.0025     0       0     1  0.0029     :     >                           lhsp(4,i,j)*rhs(4,i,j1,k)
                                               :             rhs(5,i,j,k) = rhs(5,i,j,k) -
    62  0.0028     0       0     1  0.0029     :     >                           lhsm(4,i,j)*rhs(5,i,j1,k)
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      The first three factors
                                               :c---------------------------------------------------------------------
   258  0.0116     1  0.0048     1  0.0029     :          do   j = grid_points(2)-3, 0, -1 /* y_solve_._omp_fn.0 total: 309497 13.8570  1152  5.5072  4377 12.7502 */
                                               :             j1 = j  + 1
                                               :             j2 = j  + 2
  1155  0.0517     0       0     4  0.0117     :             do  i = 1, grid_points(1)-2
                                               :                do   m = 1, 3
                                               :                   rhs(m,i,j,k) = rhs(m,i,j,k) - 
                                               :     >                          lhs(4,i,j)*rhs(m,i,j1,k) -
 19615  0.8782    30  0.1434   547  1.5934     :     >                          lhs(5,i,j)*rhs(m,i,j2,k)
                                               :                end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      And the remaining two
                                               :c---------------------------------------------------------------------
                                               :                rhs(4,i,j,k) = rhs(4,i,j,k) - 
                                               :     >                          lhsp(4,i,j)*rhs(4,i,j1,k) -
  7388  0.3308     6  0.0287   131  0.3816     :     >                          lhsp(5,i,j)*rhs(4,i,j2,k)
                                               :                rhs(5,i,j,k) = rhs(5,i,j,k) - 
                                               :     >                          lhsm(4,i,j)*rhs(5,i,j1,k) -
  8610  0.3855     9  0.0430   172  0.5010     :     >                          lhsm(5,i,j)*rhs(5,i,j2,k)
                                               :             end do
                                               :          end do
                                               :
                                               :       end do
     6 2.7e-04     0       0     0       0     :       if (timeron) call timer_stop(t_ysolve)
                                               :
                                               :
                                               :       call pinvr
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/x_solve.f"
 * 
 * 288885 12.9342  1040  4.9718  4038 11.7626
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
    80  0.0036     2  0.0096     3  0.0087     :       subroutine x_solve /* x_solve_ total:      3 1.3e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c this function performs the solution of the approximate factorization
                                               :c step in the x-direction for all five matrix components
                                               :c simultaneously. The Thomas algorithm is employed to solve the
                                               :c systems for the x-lines. Boundary conditions are non-periodic
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k, i1, i2, m
                                               :       double precision  ru1, fac1, fac2
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       if (timeron) call timer_start(t_xsolve)
                                               :!$omp parallel do default(shared) private(i,j,k,i1,i2,m,
                                               :!$omp&    ru1,fac1,fac2)
                                               :       do  k = 1, nz2
                                               :
    51  0.0023     0       0     1  0.0029     :          call lhsinit(nx2+1, ny2)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c Computes the left hand side for the three x-factors  
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      first fill the lhs for the u-eigenvalue                   
                                               :c---------------------------------------------------------------------
    32  0.0014     0       0     1  0.0029     :          do  j = 1, ny2
   693  0.0310     2  0.0096     1  0.0029     :             do  i = 0, grid_points(1)-1
  2338  0.1047    26  0.1243    12  0.0350     :                ru1 = c3c4*rho_i(i,j,k)
     4 1.8e-04     0       0     1  0.0029     :                cv(i) = us(i,j,k)
                                               :                rhon(i) = dmax1(dx2+con43*ru1, 
                                               :     >                          dx5+c1c5*ru1,
                                               :     >                          dxmax+ru1,
 16408  0.7346    81  0.3872    95  0.2767     :     >                          dx1)
                                               :             end do
                                               :
   501  0.0224     1  0.0048     3  0.0087     :             do  i = 1, nx2
   371  0.0166     2  0.0096     5  0.0146     :                lhs(1,i,j) =   0.0d0
  1711  0.0766     5  0.0239    40  0.1165     :                lhs(2,i,j) = - dttx2 * cv(i-1) - dttx1 * rhon(i-1)
  1446  0.0647     2  0.0096    41  0.1194     :                lhs(3,i,j) =   1.0d0 + c2dttx1 * rhon(i)
  5901  0.2642    21  0.1004   176  0.5127     :                lhs(4,i,j) =   dttx2 * cv(i+1) - dttx1 * rhon(i+1)
   574  0.0257     0       0     5  0.0146     :                lhs(5,i,j) =   0.0d0
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      add fourth order dissipation                             
                                               :c---------------------------------------------------------------------
                                               :
    30  0.0013     0       0     0       0     :          do  j = 1, ny2
                                               :             i = 1
   146  0.0065     1  0.0048     3  0.0087     :             lhs(3,i,j) = lhs(3,i,j) + comz5
    17 7.6e-04     0       0     1  0.0029     :             lhs(4,i,j) = lhs(4,i,j) - comz4
    60  0.0027     0       0     4  0.0117     :             lhs(5,i,j) = lhs(5,i,j) + comz1
                                               :  
    42  0.0019     0       0     1  0.0029     :             lhs(2,i+1,j) = lhs(2,i+1,j) - comz4
    48  0.0021     0       0     1  0.0029     :             lhs(3,i+1,j) = lhs(3,i+1,j) + comz6
    76  0.0034     0       0     2  0.0058     :             lhs(4,i+1,j) = lhs(4,i+1,j) - comz4
    37  0.0017     0       0     5  0.0146     :             lhs(5,i+1,j) = lhs(5,i+1,j) + comz1
                                               :          end do
                                               :
    14 6.3e-04     0       0     0       0     :          do  j = 1, ny2
   328  0.0147     0       0     2  0.0058     :             do   i=3, grid_points(1)-4
  2531  0.1133     0       0    33  0.0961     :                lhs(1,i,j) = lhs(1,i,j) + comz1
  2565  0.1148     1  0.0048    37  0.1078     :                lhs(2,i,j) = lhs(2,i,j) - comz4
  2460  0.1101     1  0.0048    43  0.1253     :                lhs(3,i,j) = lhs(3,i,j) + comz6
  2444  0.1094     0       0    39  0.1136     :                lhs(4,i,j) = lhs(4,i,j) - comz4
  2401  0.1075     0       0    22  0.0641     :                lhs(5,i,j) = lhs(5,i,j) + comz1
                                               :             end do
                                               :          end do
                                               :
                                               :
   332  0.0149     6  0.0287     8  0.0233     :          do  j = 1, ny2
     9 4.0e-04     0       0     0       0     :             i = grid_points(1)-3
   160  0.0072     0       0     1  0.0029     :             lhs(1,i,j) = lhs(1,i,j) + comz1
   107  0.0048     0       0     2  0.0058     :             lhs(2,i,j) = lhs(2,i,j) - comz4
    58  0.0026     0       0     3  0.0087     :             lhs(3,i,j) = lhs(3,i,j) + comz6
    36  0.0016     0       0     2  0.0058     :             lhs(4,i,j) = lhs(4,i,j) - comz4
                                               :
    55  0.0025     0       0     2  0.0058     :             lhs(1,i+1,j) = lhs(1,i+1,j) + comz1
    40  0.0018     0       0     3  0.0087     :             lhs(2,i+1,j) = lhs(2,i+1,j) - comz4
    47  0.0021     0       0     1  0.0029     :             lhs(3,i+1,j) = lhs(3,i+1,j) + comz5
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      subsequently, fill the other factors (u+c), (u-c) by adding to 
                                               :c      the first  
                                               :c---------------------------------------------------------------------
   807  0.0361    10  0.0478    30  0.0874     :          do  j = 1, ny2
   146  0.0065     1  0.0048     3  0.0087     :             do   i = 1, nx2
  1819  0.0814    16  0.0765    51  0.1486     :                lhsp(1,i,j) = lhs(1,i,j)
                                               :                lhsp(2,i,j) = lhs(2,i,j) - 
  6665  0.2984    52  0.2486   278  0.8098     :     >                            dttx2 * speed(i-1,j,k)
  2523  0.1130    24  0.1147    53  0.1544     :                lhsp(3,i,j) = lhs(3,i,j)
                                               :                lhsp(4,i,j) = lhs(4,i,j) + 
  6827  0.3057    64  0.3060   279  0.8127     :     >                            dttx2 * speed(i+1,j,k)
  1235  0.0553    14  0.0669    62  0.1806     :                lhsp(5,i,j) = lhs(5,i,j)
  1039  0.0465    10  0.0478    24  0.0699     :                lhsm(1,i,j) = lhs(1,i,j)
                                               :                lhsm(2,i,j) = lhs(2,i,j) + 
  1377  0.0617    14  0.0669    55  0.1602     :     >                            dttx2 * speed(i-1,j,k)
   929  0.0416    10  0.0478    31  0.0903     :                lhsm(3,i,j) = lhs(3,i,j)
                                               :                lhsm(4,i,j) = lhs(4,i,j) - 
   864  0.0387    18  0.0861    18  0.0524     :     >                            dttx2 * speed(i+1,j,k)
  1811  0.0811    21  0.1004    47  0.1369     :                lhsm(5,i,j) = lhs(5,i,j)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c                          FORWARD ELIMINATION  
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      perform the Thomas algorithm; first, FORWARD ELIMINATION     
                                               :c---------------------------------------------------------------------
                                               :
    94  0.0042     2  0.0096     0       0     :          do  j = 1, ny2
  1178  0.0527    22  0.1052    32  0.0932     :             do    i = 0, grid_points(1)-3
                                               :                i1 = i  + 1
                                               :                i2 = i  + 2
   773  0.0346     2  0.0096    11  0.0320     :                fac1      = 1.d0/lhs(3,i,j)
  3475  0.1556     9  0.0430     3  0.0087     :                lhs(4,i,j)  = fac1*lhs(4,i,j)
  3546  0.1588    45  0.2151    24  0.0699     :                lhs(5,i,j)  = fac1*lhs(5,i,j)
                                               :                do    m = 1, 3
 28646  1.2826   344  1.6445   263  0.7661     :                   rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                end do
                                               :                lhs(3,i1,j) = lhs(3,i1,j) -
  2685  0.1202     2  0.0096     0       0     :     >                         lhs(2,i1,j)*lhs(4,i,j)
                                               :                lhs(4,i1,j) = lhs(4,i1,j) -
  2948  0.1320     7  0.0335     4  0.0117     :     >                         lhs(2,i1,j)*lhs(5,i,j)
                                               :                do    m = 1, 3
                                               :                   rhs(m,i1,j,k) = rhs(m,i1,j,k) -
 10471  0.4688    35  0.1673   110  0.3204     :     >                         lhs(2,i1,j)*rhs(m,i,j,k)
                                               :                end do
                                               :                lhs(2,i2,j) = lhs(2,i2,j) -
  3291  0.1473     1  0.0048    93  0.2709     :     >                         lhs(1,i2,j)*lhs(4,i,j)
                                               :                lhs(3,i2,j) = lhs(3,i2,j) -
  3690  0.1652    16  0.0765    27  0.0787     :     >                         lhs(1,i2,j)*lhs(5,i,j)
                                               :                do    m = 1, 3
                                               :                   rhs(m,i2,j,k) = rhs(m,i2,j,k) -
  9567  0.4283    37  0.1769   172  0.5010     :     >                         lhs(1,i2,j)*rhs(m,i,j,k)
                                               :                end do
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      The last two rows in this grid block are a bit different, 
                                               :c      since they do not have two more rows available for the
                                               :c      elimination of off-diagonal entries
                                               :c---------------------------------------------------------------------
                                               :
   302  0.0135     0       0     3  0.0087     :          do  j = 1, ny2
                                               :             i  = grid_points(1)-2
                                               :             i1 = grid_points(1)-1
    13 5.8e-04     0       0     1  0.0029     :             fac1      = 1.d0/lhs(3,i,j)
    44  0.0020     0       0     1  0.0029     :             lhs(4,i,j)  = fac1*lhs(4,i,j)
    46  0.0021     0       0     2  0.0058     :             lhs(5,i,j)  = fac1*lhs(5,i,j)
                                               :             do    m = 1, 3
   107  0.0048     0       0     0       0     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             end do
                                               :             lhs(3,i1,j) = lhs(3,i1,j) -
   441  0.0197     1  0.0048     7  0.0204     :     >                      lhs(2,i1,j)*lhs(4,i,j)
                                               :             lhs(4,i1,j) = lhs(4,i1,j) -
    51  0.0023     0       0     1  0.0029     :     >                      lhs(2,i1,j)*lhs(5,i,j)
                                               :             do    m = 1, 3
                                               :                rhs(m,i1,j,k) = rhs(m,i1,j,k) -
   143  0.0064     1  0.0048     4  0.0117     :     >                      lhs(2,i1,j)*rhs(m,i,j,k)
                                               :             end do
                                               :c---------------------------------------------------------------------
                                               :c            scale the last row immediately 
                                               :c---------------------------------------------------------------------
   355  0.0159     0       0     4  0.0117     :             fac2             = 1.d0/lhs(3,i1,j)
                                               :             do    m = 1, 3
   120  0.0054     1  0.0048     1  0.0029     :                rhs(m,i1,j,k) = fac2*rhs(m,i1,j,k)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      do the u+c and the u-c factors                 
                                               :c---------------------------------------------------------------------
                                               :
    36  0.0016     0       0     0       0     :          do  j = 1, ny2
   898  0.0402     0       0     1  0.0029     :             do    i = 0, grid_points(1)-3
                                               :                i1 = i  + 1
                                               :                i2 = i  + 2
                                               :                m = 4
  1519  0.0680     0       0    19  0.0553     :                fac1       = 1.d0/lhsp(3,i,j)
 23704  1.0613    20  0.0956   259  0.7545     :                lhsp(4,i,j)  = fac1*lhsp(4,i,j)
  5485  0.2456     2  0.0096    13  0.0379     :                lhsp(5,i,j)  = fac1*lhsp(5,i,j)
  2352  0.1053     0       0    11  0.0320     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                lhsp(3,i1,j) = lhsp(3,i1,j) -
  1803  0.0807     0       0     4  0.0117     :     >                        lhsp(2,i1,j)*lhsp(4,i,j)
                                               :                lhsp(4,i1,j) = lhsp(4,i1,j) -
  4719  0.2113     6  0.0287    15  0.0437     :     >                        lhsp(2,i1,j)*lhsp(5,i,j)
                                               :                rhs(m,i1,j,k) = rhs(m,i1,j,k) -
  6421  0.2875     7  0.0335    33  0.0961     :     >                        lhsp(2,i1,j)*rhs(m,i,j,k)
                                               :                lhsp(2,i2,j) = lhsp(2,i2,j) -
 25305  1.1330    14  0.0669   245  0.7137     :     >                        lhsp(1,i2,j)*lhsp(4,i,j)
                                               :                lhsp(3,i2,j) = lhsp(3,i2,j) -
  3910  0.1751     1  0.0048    84  0.2447     :     >                        lhsp(1,i2,j)*lhsp(5,i,j)
                                               :                rhs(m,i2,j,k) = rhs(m,i2,j,k) -
  3496  0.1565     2  0.0096     3  0.0087     :     >                        lhsp(1,i2,j)*rhs(m,i,j,k)
                                               :                m = 5
   838  0.0375     0       0     0       0     :                fac1       = 1.d0/lhsm(3,i,j)
  2106  0.0943     3  0.0143     6  0.0175     :                lhsm(4,i,j)  = fac1*lhsm(4,i,j)
  3204  0.1435     0       0    18  0.0524     :                lhsm(5,i,j)  = fac1*lhsm(5,i,j)
  3211  0.1438     3  0.0143     4  0.0117     :                rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :                lhsm(3,i1,j) = lhsm(3,i1,j) -
  3291  0.1473     0       0    45  0.1311     :     >                        lhsm(2,i1,j)*lhsm(4,i,j)
                                               :                lhsm(4,i1,j) = lhsm(4,i1,j) -
  5476  0.2452     4  0.0191     8  0.0233     :     >                        lhsm(2,i1,j)*lhsm(5,i,j)
                                               :                rhs(m,i1,j,k) = rhs(m,i1,j,k) -
  3715  0.1663     3  0.0143    25  0.0728     :     >                        lhsm(2,i1,j)*rhs(m,i,j,k)
                                               :                lhsm(2,i2,j) = lhsm(2,i2,j) -
  3273  0.1465     0       0    43  0.1253     :     >                        lhsm(1,i2,j)*lhsm(4,i,j)
                                               :                lhsm(3,i2,j) = lhsm(3,i2,j) -
   168  0.0075     2  0.0096     1  0.0029     :     >                        lhsm(1,i2,j)*lhsm(5,i,j)
                                               :                rhs(m,i2,j,k) = rhs(m,i2,j,k) -
  2439  0.1092     0       0     0       0     :     >                        lhsm(1,i2,j)*rhs(m,i,j,k)
                                               :             end do
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c         And again the last two rows separately
                                               :c---------------------------------------------------------------------
    24  0.0011     0       0     2  0.0058     :          do  j = 1, ny2
                                               :             i  = grid_points(1)-2
                                               :             i1 = grid_points(1)-1
                                               :             m = 4
     9 4.0e-04     0       0     1  0.0029     :             fac1       = 1.d0/lhsp(3,i,j)
    43  0.0019     0       0     3  0.0087     :             lhsp(4,i,j)  = fac1*lhsp(4,i,j)
   101  0.0045     0       0     1  0.0029     :             lhsp(5,i,j)  = fac1*lhsp(5,i,j)
    45  0.0020     0       0     1  0.0029     :             rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             lhsp(3,i1,j) = lhsp(3,i1,j) -
    73  0.0033     0       0     3  0.0087     :     >                      lhsp(2,i1,j)*lhsp(4,i,j)
                                               :             lhsp(4,i1,j) = lhsp(4,i1,j) -
    47  0.0021     0       0     0       0     :     >                      lhsp(2,i1,j)*lhsp(5,i,j)
                                               :             rhs(m,i1,j,k) = rhs(m,i1,j,k) -
    61  0.0027     1  0.0048     1  0.0029     :     >                      lhsp(2,i1,j)*rhs(m,i,j,k)
                                               :             m = 5
   390  0.0175     0       0    22  0.0641     :             fac1       = 1.d0/lhsm(3,i,j)
   413  0.0185     0       0     2  0.0058     :             lhsm(4,i,j)  = fac1*lhsm(4,i,j)
    59  0.0026     0       0     0       0     :             lhsm(5,i,j)  = fac1*lhsm(5,i,j)
    32  0.0014     0       0     0       0     :             rhs(m,i,j,k) = fac1*rhs(m,i,j,k)
                                               :             lhsm(3,i1,j) = lhsm(3,i1,j) -
    34  0.0015     0       0     0       0     :     >                      lhsm(2,i1,j)*lhsm(4,i,j)
                                               :             lhsm(4,i1,j) = lhsm(4,i1,j) -
   154  0.0069     0       0     2  0.0058     :     >                      lhsm(2,i1,j)*lhsm(5,i,j)
                                               :             rhs(m,i1,j,k) = rhs(m,i1,j,k) -
   136  0.0061     0       0     0       0     :     >                      lhsm(2,i1,j)*rhs(m,i,j,k)
                                               :c---------------------------------------------------------------------
                                               :c               Scale the last row immediately
                                               :c---------------------------------------------------------------------
    11 4.9e-04     0       0     0       0     :             rhs(4,i1,j,k) = rhs(4,i1,j,k)/lhsp(3,i1,j)
    15 6.7e-04     0       0     0       0     :             rhs(5,i1,j,k) = rhs(5,i1,j,k)/lhsm(3,i1,j)
                                               :          end do
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c                         BACKSUBSTITUTION 
                                               :c---------------------------------------------------------------------
                                               :
                                               :
   689  0.0308     6  0.0287    24  0.0699     :          do  j = 1, ny2
                                               :             i  = grid_points(1)-2
                                               :             i1 = grid_points(1)-1
                                               :             do   m = 1, 3
                                               :                rhs(m,i,j,k) = rhs(m,i,j,k) -
   436  0.0195     2  0.0096    18  0.0524     :     >                             lhs(4,i,j)*rhs(m,i1,j,k)
                                               :             end do
                                               :
                                               :             rhs(4,i,j,k) = rhs(4,i,j,k) -
    75  0.0034     0       0     0       0     :     >                          lhsp(4,i,j)*rhs(4,i1,j,k)
                                               :             rhs(5,i,j,k) = rhs(5,i,j,k) -
    95  0.0043     0       0     2  0.0058     :     >                          lhsm(4,i,j)*rhs(5,i1,j,k)
                                               :          end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      The first three factors
                                               :c---------------------------------------------------------------------
   132  0.0059     0       0     0       0     :          do  j = 1, ny2 /* x_solve_._omp_fn.0 total: 288882 12.9341  1040  4.9718  4038 11.7626 */
   779  0.0349     0       0     1  0.0029     :             do    i = grid_points(1)-3, 0, -1
                                               :                i1 = i  + 1
                                               :                i2 = i  + 2
                                               :                do   m = 1, 3
                                               :                   rhs(m,i,j,k) = rhs(m,i,j,k) - 
                                               :     >                          lhs(4,i,j)*rhs(m,i1,j,k) -
 22517  1.0081    21  0.1004   524  1.5264     :     >                          lhs(5,i,j)*rhs(m,i2,j,k)
                                               :                end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      And the remaining two
                                               :c---------------------------------------------------------------------
                                               :                rhs(4,i,j,k) = rhs(4,i,j,k) - 
                                               :     >                          lhsp(4,i,j)*rhs(4,i1,j,k) -
  4453  0.1994     5  0.0239   119  0.3466     :     >                          lhsp(5,i,j)*rhs(4,i2,j,k)
                                               :                rhs(5,i,j,k) = rhs(5,i,j,k) - 
                                               :     >                          lhsm(4,i,j)*rhs(5,i1,j,k) -
  8510  0.3810     8  0.0382   182  0.5302     :     >                          lhsm(5,i,j)*rhs(5,i2,j,k)
                                               :             end do
                                               :          end do
                                               :
                                               :       end do
     2 9.0e-05     0       0     0       0     :       if (timeron) call timer_stop(t_xsolve)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      Do the block-diagonal inversion          
                                               :c---------------------------------------------------------------------
                                               :       call ninvr
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/tzetar.f"
 * 
 *  85140  3.8120  1596  7.6298  1346  3.9209
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
    69  0.0031     0       0     0       0     :       subroutine  tzetar /* tzetar_ total:      4 1.8e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c   block-diagonal matrix-vector multiplication                       
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k
                                               :       double precision  t1, t2, t3, ac, xvel, yvel, zvel, r1, r2, r3, 
                                               :     >                   r4, r5, btuz, ac2u, uzik1
                                               :
                                               :
                                               :       if (timeron) call timer_start(t_tzetar)
                                               :!$omp parallel do default(shared)
                                               :!$omp& private(i,j,k,t1,t2,t3,ac,xvel,yvel,zvel,r1,r2,r3, 
                                               :!$omp&              r4,r5,btuz,ac2u,uzik1)
                                               :       do    k = 1, nz2
    69  0.0031     2  0.0096     1  0.0029     :          do    j = 1, ny2 /* tzetar_._omp_fn.0 total:  85136  3.8118  1596  7.6298  1346  3.9209 */
  1782  0.0798    23  0.1100     6  0.0175     :             do    i = 1, nx2
                                               :
   159  0.0071     4  0.0191    10  0.0291     :                xvel = us(i,j,k)
    11 4.9e-04     0       0     0       0     :                yvel = vs(i,j,k)
  1634  0.0732    28  0.1339    14  0.0408     :                zvel = ws(i,j,k)
   728  0.0326    18  0.0861    11  0.0320     :                ac   = speed(i,j,k)
                                               :
   757  0.0339    10  0.0478     4  0.0117     :                ac2u = ac*ac
                                               :
    10 4.5e-04     0       0     0       0     :                r1 = rhs(1,i,j,k)
  1915  0.0857    42  0.2008    88  0.2563     :                r2 = rhs(2,i,j,k)
                                               :                r3 = rhs(3,i,j,k)
   770  0.0345    12  0.0574     7  0.0204     :                r4 = rhs(4,i,j,k)
  6020  0.2695    92  0.4398    87  0.2534     :                r5 = rhs(5,i,j,k)      
                                               :
  8255  0.3696   108  0.5163   169  0.4923     :                uzik1 = u(1,i,j,k)
  3495  0.1565    68  0.3251    87  0.2534     :                btuz  = bt * uzik1
                                               :
  2170  0.0972    46  0.2199    81  0.2360     :                t1 = btuz/ac * (r4 + r5)
  1581  0.0708    35  0.1673    59  0.1719     :                t2 = r3 + t1
   164  0.0073     1  0.0048     5  0.0146     :                t3 = btuz * (r4 - r5)
                                               :
  1552  0.0695    23  0.1100    11  0.0320     :                rhs(1,i,j,k) = t2
 29106  1.3032   674  3.2221   486  1.4157     :                rhs(2,i,j,k) = -uzik1*r2 + xvel*t2
  4714  0.2111    69  0.3299    36  0.1049     :                rhs(3,i,j,k) =  uzik1*r1 + yvel*t2
  1596  0.0715    19  0.0908     5  0.0146     :                rhs(4,i,j,k) =  zvel*t2  + t3
                                               :                rhs(5,i,j,k) =  uzik1*(-xvel*r2 + yvel*r1) + 
 18579  0.8318   322  1.5393   179  0.5214     :     >                    qs(i,j,k)*t2 + c2iv*ac2u*t1 + zvel*t3
                                               :
                                               :             end do
                                               :          end do
                                               :       end do
     4 1.8e-04     0       0     0       0     :       if (timeron) call timer_stop(t_tzetar)
                                               :
                                               :       return
                                               :       end
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/txinvr.f"
 * 
 *  76937  3.4447  1159  5.5407  1119  3.2596
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
    35  0.0016     0       0     0       0     :       subroutine  txinvr /* txinvr_ total:      6 2.7e-04     1  0.0048     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c block-diagonal matrix-vector multiplication                  
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k
                                               :       double precision t1, t2, t3, ac, ru1, uu, vv, ww, r1, r2, r3, 
                                               :     >                  r4, r5, ac2inv
                                               :
                                               :
                                               :       if (timeron) call timer_start(t_txinvr)
                                               :!$omp parallel do default(shared)
                                               :!$omp& private(i,j,k,t1,t2,t3,ac,ru1,uu,vv,ww,r1,r2,r3,r4,r5,ac2inv)
                                               :       do    k = 1, nz2
    62  0.0028     0       0     0       0     :          do    j = 1, ny2 /* txinvr_._omp_fn.0 total:  76931  3.4444  1158  5.5359  1119  3.2596 */
  1734  0.0776    19  0.0908     7  0.0204     :             do    i = 1, nx2
                                               :
   860  0.0385    14  0.0669    25  0.0728     :                ru1 = rho_i(i,j,k)
  2403  0.1076    40  0.1912    34  0.0990     :                uu = us(i,j,k)
  2591  0.1160    31  0.1482    47  0.1369     :                vv = vs(i,j,k)
  2692  0.1205    26  0.1243    30  0.0874     :                ww = ws(i,j,k)
   774  0.0347     8  0.0382    14  0.0408     :                ac = speed(i,j,k)
   332  0.0149     4  0.0191    33  0.0961     :                ac2inv = ac*ac
                                               :
   765  0.0343     7  0.0335     7  0.0204     :                r1 = rhs(1,i,j,k)
    22 9.9e-04     0       0     0       0     :                r2 = rhs(2,i,j,k)
   995  0.0445    20  0.0956    34  0.0990     :                r3 = rhs(3,i,j,k)
   714  0.0320    11  0.0526    11  0.0320     :                r4 = rhs(4,i,j,k)
                                               :                r5 = rhs(5,i,j,k)
                                               :
                                               :                t1 = c2 / ac2inv * ( qs(i,j,k)*r1 - uu*r2  - 
 37830  1.6938   676  3.2317   679  1.9779     :     >                  vv*r3 - ww*r4 + r5 )
  8197  0.3670   120  0.5737    88  0.2563     :                t2 = bt * ru1 * ( uu * r1 - r2 )
  3101  0.1388    33  0.1578    13  0.0379     :                t3 = ( bt * ru1 * ac ) * t1
                                               :
  3115  0.1395    40  0.1912    19  0.0553     :                rhs(1,i,j,k) = r1 - t1
  3790  0.1697    50  0.2390    46  0.1340     :                rhs(2,i,j,k) = - ru1 * ( ww*r1 - r4 )
  3151  0.1411    21  0.1004    13  0.0379     :                rhs(3,i,j,k) =   ru1 * ( vv*r1 - r3 )
  3025  0.1354    29  0.1386    16  0.0466     :                rhs(4,i,j,k) = - t2 + t3
   743  0.0333     9  0.0430     3  0.0087     :                rhs(5,i,j,k) =   t2 + t3
                                               :
                                               :             end do
                                               :          end do
                                               :       end do
     6 2.7e-04     1  0.0048     0       0     :       if (timeron) call timer_stop(t_txinvr)
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/add.f"
 * 
 *  52887  2.3679  1074  5.1343  1409  4.1044
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       subroutine  add /* add_ total:      4 1.8e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c addition of update to the vector u
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i,j,k,m
                                               :
                                               :       if (timeron) call timer_start(t_add)
                                               :!$omp parallel do default(shared) private(i,j,k,m)
                                               :       do k = 1, nz2
    72  0.0032     3  0.0143     4  0.0117     :          do j = 1, ny2 /* add_._omp_fn.0 total:  52883  2.3677  1074  5.1343  1409  4.1044 */
    31  0.0014     3  0.0143     0       0     :             do i = 1, nx2
                                               :                do m = 1, 5
 52780  2.3631  1068  5.1057  1405  4.0927     :                   u(m,i,j,k) = u(m,i,j,k) + rhs(m,i,j,k)
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
     4 1.8e-04     0       0     0       0     :       if (timeron) call timer_stop(t_add)
                                               :
                                               :       return
                                               :       end
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/pinvr.f"
 * 
 *  38087  1.7053   543  2.5959   795  2.3158
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
     4 1.8e-04     0       0     0       0     :       subroutine pinvr /* pinvr_ total:      4 1.8e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c   block-diagonal matrix-vector multiplication                       
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k
                                               :       double precision r1, r2, r3, r4, r5, t1, t2
                                               :
                                               :       if (timeron) call timer_start(t_pinvr)
                                               :!$omp parallel do default(shared) private(i,j,k,r1,r2,r3,r4,r5,t1,t2)
                                               :       do   k = 1, nz2
   269  0.0120     5  0.0239     4  0.0117     :          do   j = 1, ny2 /* pinvr_._omp_fn.0 total:  38083  1.7051   543  2.5959   795  2.3158 */
   304  0.0136    10  0.0478     4  0.0117     :             do   i = 1, nx2
                                               :
                                               :                r1 = rhs(1,i,j,k)
   442  0.0198     7  0.0335    14  0.0408     :                r2 = rhs(2,i,j,k)
  4008  0.1794    51  0.2438    71  0.2068     :                r3 = rhs(3,i,j,k)
  7036  0.3150    62  0.2964   111  0.3233     :                r4 = rhs(4,i,j,k)
  3985  0.1784    57  0.2725    76  0.2214     :                r5 = rhs(5,i,j,k)
                                               :
  1679  0.0752    41  0.1960    48  0.1398     :                t1 = bt * r1
  4655  0.2084    72  0.3442   131  0.3816     :                t2 = 0.5d0 * ( r4 + r5 )
                                               :
  7898  0.3536    89  0.4255   146  0.4253     :                rhs(1,i,j,k) =  bt * ( r4 - r5 )
  1072  0.0480    33  0.1578    48  0.1398     :                rhs(2,i,j,k) = -r3
   481  0.0215    10  0.0478    17  0.0495     :                rhs(3,i,j,k) =  r2
  4762  0.2132    69  0.3299    93  0.2709     :                rhs(4,i,j,k) = -t1 + t2
  1488  0.0666    37  0.1769    32  0.0932     :                rhs(5,i,j,k) =  t1 + t2
                                               :             end do
                                               :          end do
                                               :       end do
     4 1.8e-04     0       0     0       0     :       if (timeron) call timer_stop(t_pinvr)
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/ninvr.f"
 * 
 *  37642  1.6853   530  2.5337   853  2.4848
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
     1 4.5e-05     0       0     0       0     :       subroutine  ninvr /* ninvr_ total:     11 4.9e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c   block-diagonal matrix-vector multiplication              
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer  i, j, k
                                               :       double precision r1, r2, r3, r4, r5, t1, t2
                                               :
                                               :       if (timeron) call timer_start(t_ninvr)
                                               :!$omp parallel do default(shared) private(i,j,k,r1,r2,r3,r4,r5,t1,t2)
                                               :       do k = 1, nz2
   278  0.0124     2  0.0096     9  0.0262     :          do j = 1, ny2 /* ninvr_._omp_fn.0 total:  37631  1.6848   530  2.5337   853  2.4848 */
   313  0.0140     8  0.0382     6  0.0175     :             do i = 1, nx2
                                               :
   451  0.0202    11  0.0526    10  0.0291     :                r1 = rhs(1,i,j,k)
                                               :                r2 = rhs(2,i,j,k)
                                               :                r3 = rhs(3,i,j,k)
 11188  0.5009   100  0.4781   205  0.5972     :                r4 = rhs(4,i,j,k)
   553  0.0248    14  0.0669    19  0.0553     :                r5 = rhs(5,i,j,k)
                                               :               
  2224  0.0996    49  0.2342    76  0.2214     :                t1 = bt * r3
  9532  0.4268   120  0.5737   228  0.6642     :                t2 = 0.5d0 * ( r4 + r5 )
                                               :
  3179  0.1423    59  0.2821    89  0.2593     :                rhs(1,i,j,k) = -r2
   465  0.0208     9  0.0430    25  0.0728     :                rhs(2,i,j,k) =  r1
  1754  0.0785    38  0.1817    39  0.1136     :                rhs(3,i,j,k) = bt * ( r4 - r5 )
  6287  0.2815    82  0.3920   107  0.3117     :                rhs(4,i,j,k) = -t1 + t2
  1406  0.0630    38  0.1817    40  0.1165     :                rhs(5,i,j,k) =  t1 + t2
                                               :             enddo    
                                               :          enddo
                                               :       enddo
    11 4.9e-04     0       0     0       0     :       if (timeron) call timer_stop(t_ninvr)
                                               :
                                               :       return
                                               :       end
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S"
 * 
 *   7231  0.3238   108  0.5163   135  0.3933
 */


 /* __memcpy_sse2_unaligned_erms total:   7231  0.3238   108  0.5163   135  0.3933 */
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/exact_solution.f"
 * 
 *   7821  0.3502     2  0.0096     0       0
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :      subroutine exact_solution(xi,eta,zeta,dtemp)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c this function returns the exact solution at point xi, eta, zeta  
                                               :c---------------------------------------------------------------------
                                               :
                                               :c       include 'header.h'
                                               :      implicit none
                                               :      double precision  tx1, tx2, tx3, ty1, ty2, ty3, tz1, tz2, tz3, 
                                               :     >                  dx1, dx2, dx3, dx4, dx5, dy1, dy2, dy3, dy4, 
                                               :     >                  dy5, dz1, dz2, dz3, dz4, dz5, dssp, dt, 
                                               :     >                  ce(5,13), dxmax, dymax, dzmax, xxcon1, xxcon2, 
                                               :     >                  xxcon3, xxcon4, xxcon5, dx1tx1, dx2tx1, dx3tx1,
                                               :     >                  dx4tx1, dx5tx1, yycon1, yycon2, yycon3, yycon4,
                                               :     >                  yycon5, dy1ty1, dy2ty1, dy3ty1, dy4ty1, dy5ty1,
                                               :     >                  zzcon1, zzcon2, zzcon3, zzcon4, zzcon5, dz1tz1, 
                                               :     >                  dz2tz1, dz3tz1, dz4tz1, dz5tz1, dnxm1, dnym1, 
                                               :     >                  dnzm1, c1c2, c1c5, c3c4, c1345, conz1, c1, c2, 
                                               :     >                  c3, c4, c5, c4dssp, c5dssp, dtdssp, dttx1, bt,
                                               :     >                  dttx2, dtty1, dtty2, dttz1, dttz2, c2dttx1, 
                                               :     >                  c2dtty1, c2dttz1, comz1, comz4, comz5, comz6, 
                                               :     >                  c3c4tx3, c3c4ty3, c3c4tz3, c2iv, con43, con16
                                               :
                                               :      common /constants/ tx1, tx2, tx3, ty1, ty2, ty3, tz1, tz2, tz3,
                                               :     >                  dx1, dx2, dx3, dx4, dx5, dy1, dy2, dy3, dy4, 
                                               :     >                  dy5, dz1, dz2, dz3, dz4, dz5, dssp, dt, 
                                               :     >                  ce, dxmax, dymax, dzmax, xxcon1, xxcon2, 
                                               :     >                  xxcon3, xxcon4, xxcon5, dx1tx1, dx2tx1, dx3tx1,
                                               :     >                  dx4tx1, dx5tx1, yycon1, yycon2, yycon3, yycon4,
                                               :     >                  yycon5, dy1ty1, dy2ty1, dy3ty1, dy4ty1, dy5ty1,
                                               :     >                  zzcon1, zzcon2, zzcon3, zzcon4, zzcon5, dz1tz1, 
                                               :     >                  dz2tz1, dz3tz1, dz4tz1, dz5tz1, dnxm1, dnym1, 
                                               :     >                  dnzm1, c1c2, c1c5, c3c4, c1345, conz1, c1, c2, 
                                               :     >                  c3, c4, c5, c4dssp, c5dssp, dtdssp, dttx1, bt,
                                               :     >                  dttx2, dtty1, dtty2, dttz1, dttz2, c2dttx1, 
                                               :     >                  c2dtty1, c2dttz1, comz1, comz4, comz5, comz6, 
                                               :     >                  c3c4tx3, c3c4ty3, c3c4tz3, c2iv, con43, con16
                                               :
                                               :       double precision  xi, eta, zeta
                                               :       double precision  dtemp(5)
                                               :       integer m
                                               :
                                               :       do  m = 1, 5
                                               :          dtemp(m) =  ce(m,1) +
                                               :     >    xi*(ce(m,2) + xi*(ce(m,5) + xi*(ce(m,8) + xi*ce(m,11)))) +
                                               :     >    eta*(ce(m,3) + eta*(ce(m,6) + eta*(ce(m,9) + eta*ce(m,12))))+
                                               :     >    zeta*(ce(m,4) + zeta*(ce(m,7) + zeta*(ce(m,10) + 
  7785  0.3486     2  0.0096     0       0     :     >    zeta*ce(m,13)))) /* exact_solution_ total:   7821  0.3502     2  0.0096     0       0 */
                                               :       end do
                                               :
                                               :       return
    36  0.0016     0       0     0       0     :       end
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/initialize.f"
 * 
 *   3709  0.1661    19  0.0908    83  0.2418
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       subroutine  initialize
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c This subroutine initializes the field variable u using 
                                               :c tri-linear transfinite interpolation of the boundary values     
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :  
                                               :       integer i, j, k, m, ix, iy, iz
                                               :       double precision  xi, eta, zeta, Pface(5,3,2), Pxi, Peta, 
                                               :     >                   Pzeta, temp(5)
                                               :    
                                               :
                                               :!$omp parallel default(shared)
                                               :!$omp& private(i,j,k,m,zeta,eta,xi,ix,iy,iz,Pxi,Peta,Pzeta,Pface,temp) /* initialize_._omp_fn.0 total:    835  0.0374     3  0.0143     6  0.0175 */
                                               :c---------------------------------------------------------------------
                                               :c  Later (in compute_rhs) we compute 1/u for every element. A few of 
                                               :c  the corner elements are not used, but it convenient (and faster) 
                                               :c  to compute the whole thing with a simple loop. Make sure those 
                                               :c  values are nonzero by initializing the whole thing here. 
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :      do k = 0, grid_points(3)-1
     2 9.0e-05     0       0     0       0     :         do j = 0, grid_points(2)-1
    11 4.9e-04     0       0     2  0.0058     :            do i = 0, grid_points(1)-1
   103  0.0046     0       0     2  0.0058     :               u(1,i,j,k) = 1.0
     3 1.3e-04     0       0     0       0     :               u(2,i,j,k) = 0.0
     7 3.1e-04     0       0     0       0     :               u(3,i,j,k) = 0.0
    10 4.5e-04     0       0     0       0     :               u(4,i,j,k) = 0.0
     3 1.3e-04     0       0     0       0     :               u(5,i,j,k) = 1.0
                                               :            end do
                                               :         end do
                                               :      end do
                                               :!$omp end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c first store the "interpolated" values everywhere on the grid    
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :          do  k = 0, grid_points(3)-1
                                               :             zeta = dble(k) * dnzm1
                                               :             do  j = 0, grid_points(2)-1
     2 9.0e-05     0       0     0       0     :                eta = dble(j) * dnym1
     4 1.8e-04     0       0     0       0     :                do   i = 0, grid_points(1)-1
     8 3.6e-04     0       0     0       0     :                   xi = dble(i) * dnxm1
                                               :                  
                                               :                   do ix = 1, 2
     8 3.6e-04     0       0     0       0     :                      Pxi = dble(ix-1)
                                               :                      call exact_solution(Pxi, eta, zeta, 
    30  0.0013     0       0     0       0     :     >                                    Pface(1,1,ix))
                                               :                   end do
                                               :
                                               :                   do    iy = 1, 2
     8 3.6e-04     0       0     0       0     :                      Peta = dble(iy-1)
                                               :                      call exact_solution(xi, Peta, zeta, 
    24  0.0011     0       0     0       0     :     >                                    Pface(1,2,iy))
                                               :                   end do
                                               :
                                               :                   do    iz = 1, 2
     5 2.2e-04     0       0     0       0     :                      Pzeta = dble(iz-1)
                                               :                      call exact_solution(xi, eta, Pzeta,   
    36  0.0016     0       0     0       0     :     >                                    Pface(1,3,iz))
                                               :                   end do
                                               :
                                               :                   do   m = 1, 5
                                               :                      Pxi   = xi   * Pface(m,1,2) + 
    88  0.0039     0       0     0       0     :     >                        (1.0d0-xi)   * Pface(m,1,1)
                                               :                      Peta  = eta  * Pface(m,2,2) + 
    98  0.0044     0       0     1  0.0029     :     >                        (1.0d0-eta)  * Pface(m,2,1)
                                               :                      Pzeta = zeta * Pface(m,3,2) + 
   105  0.0047     0       0     0       0     :     >                        (1.0d0-zeta) * Pface(m,3,1)
                                               : 
                                               :                      u(m,i,j,k) = Pxi + Peta + Pzeta - 
                                               :     >                          Pxi*Peta - Pxi*Pzeta - Peta*Pzeta + 
   266  0.0119     3  0.0143     1  0.0029     :     >                          Pxi*Peta*Pzeta
                                               :
                                               :                   end do
                                               :                end do
                                               :             end do
                                               :          end do
                                               :!$omp end do nowait
                                               :
                                               :c---------------------------------------------------------------------
                                               :c now store the exact values on the boundaries        
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c west face                                                  
                                               :c---------------------------------------------------------------------
                                               :
                                               :       xi = 0.0d0
                                               :       i  = 0
                                               :!$omp do schedule(static)
                                               :       do  k = 0, grid_points(3)-1
                                               :          zeta = dble(k) * dnzm1
                                               :          do   j = 0, grid_points(2)-1
                                               :             eta = dble(j) * dnym1
     2 9.0e-05     0       0     0       0     :             call exact_solution(xi, eta, zeta, temp)
                                               :             do   m = 1, 5
     3 1.3e-04     0       0     0       0     :                u(m,i,j,k) = temp(m)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :c---------------------------------------------------------------------
                                               :c east face                                                      
                                               :c---------------------------------------------------------------------
                                               :
                                               :       xi = 1.0d0
                                               :       i  = grid_points(1)-1
                                               :!$omp do schedule(static)
                                               :       do   k = 0, grid_points(3)-1
                                               :          zeta = dble(k) * dnzm1
                                               :          do   j = 0, grid_points(2)-1
                                               :             eta = dble(j) * dnym1
                                               :             call exact_solution(xi, eta, zeta, temp)
     2 9.0e-05     0       0     0       0     :             do   m = 1, 5
                                               :                u(m,i,j,k) = temp(m)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :c---------------------------------------------------------------------
                                               :c south face                                                 
                                               :c---------------------------------------------------------------------
                                               :
                                               :       eta = 0.0d0
                                               :       j   = 0
                                               :!$omp do schedule(static)
                                               :       do  k = 0, grid_points(3)-1
                                               :          zeta = dble(k) * dnzm1
                                               :          do   i = 0, grid_points(1)-1
                                               :             xi = dble(i) * dnxm1
                                               :             call exact_solution(xi, eta, zeta, temp)
     2 9.0e-05     0       0     0       0     :             do   m = 1, 5
     1 4.5e-05     0       0     0       0     :                u(m,i,j,k) = temp(m)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :
                                               :c---------------------------------------------------------------------
                                               :c north face                                    
                                               :c---------------------------------------------------------------------
                                               :
                                               :       eta = 1.0d0
                                               :       j   = grid_points(2)-1
                                               :!$omp do schedule(static)
                                               :       do   k = 0, grid_points(3)-1
                                               :          zeta = dble(k) * dnzm1
                                               :          do   i = 0, grid_points(1)-1
                                               :             xi = dble(i) * dnxm1
                                               :             call exact_solution(xi, eta, zeta, temp)
                                               :             do   m = 1, 5
                                               :                u(m,i,j,k) = temp(m)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c bottom face                                       
                                               :c---------------------------------------------------------------------
                                               :
                                               :       zeta = 0.0d0
                                               :       k    = 0
                                               :!$omp do schedule(static)
                                               :       do   j = 0, grid_points(2)-1
                                               :          eta = dble(j) * dnym1
                                               :          do   i =0, grid_points(1)-1
                                               :             xi = dble(i) *dnxm1
                                               :             call exact_solution(xi, eta, zeta, temp)
     2 9.0e-05     0       0     0       0     :             do   m = 1, 5
     1 4.5e-05     0       0     0       0     :                u(m,i,j,k) = temp(m)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :c---------------------------------------------------------------------
                                               :c top face     
                                               :c---------------------------------------------------------------------
                                               :
                                               :       zeta = 1.0d0
                                               :       k    = grid_points(3)-1
                                               :!$omp do schedule(static)
                                               :       do   j = 0, grid_points(2)-1
                                               :          eta = dble(j) * dnym1
                                               :          do   i =0, grid_points(1)-1
                                               :             xi = dble(i) * dnxm1
                                               :             call exact_solution(xi, eta, zeta, temp)
                                               :             do   m = 1, 5
     1 4.5e-05     0       0     0       0     :                u(m,i,j,k) = temp(m)
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :!$omp end parallel
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
                                               :       subroutine lhsinit(ni, nj)
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer ni, nj
                                               :
                                               :       integer j, m
                                               :
                                               :c---------------------------------------------------------------------
                                               :c     zap the whole left hand side for starters
                                               :c     set all diagonal values to 1. This is overkill, but convenient
                                               :c---------------------------------------------------------------------
    54  0.0024     1  0.0048     1  0.0029     :       do j = 1, nj /* lhsinit_ total:   1454  0.0651     6  0.0287    45  0.1311 */
                                               :          do   m = 1, 5
   225  0.0101     1  0.0048     5  0.0146     :             lhs (m,0,j) = 0.0d0
   132  0.0059     1  0.0048     4  0.0117     :             lhsp(m,0,j) = 0.0d0
   124  0.0056     0       0     6  0.0175     :             lhsm(m,0,j) = 0.0d0
   216  0.0097     0       0     3  0.0087     :             lhs (m,ni,j) = 0.0d0
   203  0.0091     0       0     6  0.0175     :             lhsp(m,ni,j) = 0.0d0
   271  0.0121     1  0.0048    12  0.0350     :             lhsm(m,ni,j) = 0.0d0
                                               :          end do
    39  0.0017     0       0     2  0.0058     :          lhs (3,0,j) = 1.0d0
    31  0.0014     1  0.0048     2  0.0058     :          lhsp(3,0,j) = 1.0d0
    29  0.0013     1  0.0048     0       0     :          lhsm(3,0,j) = 1.0d0
    34  0.0015     0       0     3  0.0087     :          lhs (3,ni,j) = 1.0d0
    53  0.0024     0       0     0       0     :          lhsp(3,ni,j) = 1.0d0
    43  0.0019     0       0     1  0.0029     :          lhsm(3,ni,j) = 1.0d0
                                               :       end do
                                               : 
                                               :       return
                                               :       end
                                               :
                                               :
    47  0.0021     0       0     0       0     :       subroutine lhsinitj(nj, ni) /* lhsinitj_ total:   1420  0.0636    10  0.0478    32  0.0932 */
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer nj, ni
                                               :
                                               :       integer i, m
                                               :
                                               :c---------------------------------------------------------------------
                                               :c     zap the whole left hand side for starters
                                               :c     set all diagonal values to 1. This is overkill, but convenient
                                               :c---------------------------------------------------------------------
    68  0.0030     1  0.0048     1  0.0029     :       do i = 1, ni
                                               :          do   m = 1, 5
   207  0.0093     3  0.0143     7  0.0204     :             lhs (m,i,0) = 0.0d0
   233  0.0104     1  0.0048     6  0.0175     :             lhsp(m,i,0) = 0.0d0
   233  0.0104     1  0.0048     5  0.0146     :             lhsm(m,i,0) = 0.0d0
   149  0.0067     2  0.0096     1  0.0029     :             lhs (m,i,nj) = 0.0d0
   220  0.0099     0       0     5  0.0146     :             lhsp(m,i,nj) = 0.0d0
   235  0.0105     1  0.0048     7  0.0204     :             lhsm(m,i,nj) = 0.0d0
                                               :          end do
                                               :          lhs (3,i,0) = 1.0d0
                                               :          lhsp(3,i,0) = 1.0d0
                                               :          lhsm(3,i,0) = 1.0d0
                                               :          lhs (3,i,nj) = 1.0d0
                                               :          lhsp(3,i,nj) = 1.0d0
                                               :          lhsm(3,i,nj) = 1.0d0
                                               :       end do
                                               : 
                                               :       return
    28  0.0013     1  0.0048     0       0     :       end
                                               :
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/exact_rhs.f"
 * 
 *   2131  0.0954     4  0.0191     4  0.0117
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
    10 4.5e-04     0       0     0       0     :       subroutine exact_rhs
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c compute the right hand side based on exact solution
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       double precision dtemp(5), xi, eta, zeta, dtpp
                                               :       integer          m, i, j, k, ip1, im1, jp1, 
                                               :     >                  jm1, km1, kp1
                                               :
                                               :!$omp parallel default(shared)
                                               :!$omp& private(i,j,k,m,zeta,eta,xi,dtpp,im1,ip1,
                                               :!$omp&         jm1,jp1,km1,kp1,dtemp) /* exact_rhs_._omp_fn.0 total:   2131  0.0954     4  0.0191     4  0.0117 */
                                               :c---------------------------------------------------------------------
                                               :c      initialize                                  
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :       do   k= 0, grid_points(3)-1
                                               :          do   j = 0, grid_points(2)-1
     1 4.5e-05     0       0     0       0     :             do   i = 0, grid_points(1)-1
                                               :                do   m = 1, 5
    14 6.3e-04     0       0     0       0     :                   forcing(m,i,j,k) = 0.0d0
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      xi-direction flux differences                      
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :       do   k = 1, grid_points(3)-2
                                               :          zeta = dble(k) * dnzm1
                                               :          do   j = 1, grid_points(2)-2
     1 4.5e-05     0       0     0       0     :             eta = dble(j) * dnym1
                                               :
     5 2.2e-04     0       0     0       0     :             do  i=0, grid_points(1)-1
     3 1.3e-04     0       0     0       0     :                xi = dble(i) * dnxm1
                                               :
     5 2.2e-04     0       0     0       0     :                call exact_solution(xi, eta, zeta, dtemp)
                                               :                do  m = 1, 5
    57  0.0026     0       0     0       0     :                   ue(i,m) = dtemp(m)
                                               :                end do
                                               :
     2 9.0e-05     0       0     0       0     :                dtpp = 1.0d0 / dtemp(1)
                                               :
                                               :                do  m = 2, 5
    22 9.9e-04     0       0     0       0     :                   buf(i,m) = dtpp * dtemp(m)
                                               :                end do
                                               :
     3 1.3e-04     0       0     0       0     :                cuf(i)   = buf(i,2) * buf(i,2)
                                               :                buf(i,1) = cuf(i) + buf(i,3) * buf(i,3) + 
     9 4.0e-04     0       0     0       0     :     >                     buf(i,4) * buf(i,4) 
                                               :                q(i) = 0.5d0*(buf(i,2)*ue(i,2) + buf(i,3)*ue(i,3) +
    17 7.6e-04     0       0     0       0     :     >                        buf(i,4)*ue(i,4))
                                               :
                                               :             end do
                                               : 
     3 1.3e-04     0       0     0       0     :             do  i = 1, grid_points(1)-2
                                               :                im1 = i-1
     4 1.8e-04     0       0     0       0     :                ip1 = i+1
                                               :
                                               :                forcing(1,i,j,k) = forcing(1,i,j,k) -
                                               :     >                 tx2*( ue(ip1,2)-ue(im1,2) )+
    21 9.4e-04     0       0     0       0     :     >                 dx1tx1*(ue(ip1,1)-2.0d0*ue(i,1)+ue(im1,1))
                                               :
                                               :                forcing(2,i,j,k) = forcing(2,i,j,k) - tx2 * (
                                               :     >                (ue(ip1,2)*buf(ip1,2)+c2*(ue(ip1,5)-q(ip1)))-
                                               :     >                (ue(im1,2)*buf(im1,2)+c2*(ue(im1,5)-q(im1))))+
                                               :     >                 xxcon1*(buf(ip1,2)-2.0d0*buf(i,2)+buf(im1,2))+
   117  0.0052     0       0     0       0     :     >                 dx2tx1*( ue(ip1,2)-2.0d0* ue(i,2)+ue(im1,2))
                                               :
                                               :                forcing(3,i,j,k) = forcing(3,i,j,k) - tx2 * (
                                               :     >                 ue(ip1,3)*buf(ip1,2)-ue(im1,3)*buf(im1,2))+
                                               :     >                 xxcon2*(buf(ip1,3)-2.0d0*buf(i,3)+buf(im1,3))+
    64  0.0029     0       0     0       0     :     >                 dx3tx1*( ue(ip1,3)-2.0d0*ue(i,3) +ue(im1,3))
                                               :                  
                                               :                forcing(4,i,j,k) = forcing(4,i,j,k) - tx2*(
                                               :     >                 ue(ip1,4)*buf(ip1,2)-ue(im1,4)*buf(im1,2))+
                                               :     >                 xxcon2*(buf(ip1,4)-2.0d0*buf(i,4)+buf(im1,4))+
    50  0.0022     0       0     0       0     :     >                 dx4tx1*( ue(ip1,4)-2.0d0* ue(i,4)+ ue(im1,4))
                                               :
                                               :                forcing(5,i,j,k) = forcing(5,i,j,k) - tx2*(
                                               :     >                 buf(ip1,2)*(c1*ue(ip1,5)-c2*q(ip1))-
                                               :     >                 buf(im1,2)*(c1*ue(im1,5)-c2*q(im1)))+
                                               :     >                 0.5d0*xxcon3*(buf(ip1,1)-2.0d0*buf(i,1)+
                                               :     >                               buf(im1,1))+
                                               :     >                 xxcon4*(cuf(ip1)-2.0d0*cuf(i)+cuf(im1))+
                                               :     >                 xxcon5*(buf(ip1,5)-2.0d0*buf(i,5)+buf(im1,5))+
   112  0.0050     0       0     0       0     :     >                 dx5tx1*( ue(ip1,5)-2.0d0* ue(i,5)+ ue(im1,5))
                                               :             end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c            Fourth-order dissipation                         
                                               :c---------------------------------------------------------------------
                                               :             do   m = 1, 5
                                               :                i = 1
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                    (5.0d0*ue(i,m) - 4.0d0*ue(i+1,m) +ue(i+2,m))
                                               :                i = 2
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (-4.0d0*ue(i-1,m) + 6.0d0*ue(i,m) -
     1 4.5e-05     0       0     0       0     :     >                     4.0d0*ue(i+1,m) +       ue(i+2,m))
                                               :             end do
                                               :
                                               :             do   m = 1, 5
     1 4.5e-05     0       0     0       0     :                do  i = 3, grid_points(1)-4
                                               :                   forcing(m,i,j,k) = forcing(m,i,j,k) - dssp*
                                               :     >                   (ue(i-2,m) - 4.0d0*ue(i-1,m) +
   155  0.0069     0       0     0       0     :     >                    6.0d0*ue(i,m) - 4.0d0*ue(i+1,m) + ue(i+2,m))
                                               :                end do
                                               :             end do
                                               :
                                               :             do   m = 1, 5
                                               :                i = grid_points(1)-3
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (ue(i-2,m) - 4.0d0*ue(i-1,m) +
     5 2.2e-04     0       0     0       0     :     >                    6.0d0*ue(i,m) - 4.0d0*ue(i+1,m))
                                               :                i = grid_points(1)-2
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (ue(i-2,m) - 4.0d0*ue(i-1,m) + 5.0d0*ue(i,m))
                                               :             end do
                                               :
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :
                                               :c---------------------------------------------------------------------
                                               :c  eta-direction flux differences             
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :       do   k = 1, grid_points(3)-2          
                                               :          zeta = dble(k) * dnzm1
     1 4.5e-05     0       0     0       0     :          do   i=1, grid_points(1)-2
                                               :             xi = dble(i) * dnxm1
                                               :
     2 9.0e-05     0       0     0       0     :             do  j=0, grid_points(2)-1
     5 2.2e-04     0       0     0       0     :                eta = dble(j) * dnym1
                                               :
     3 1.3e-04     0       0     0       0     :                call exact_solution(xi, eta, zeta, dtemp)
                                               :                do   m = 1, 5 
    70  0.0031     0       0     0       0     :                   ue(j,m) = dtemp(m)
                                               :                end do
     6 2.7e-04     0       0     0       0     :                dtpp = 1.0d0/dtemp(1)
                                               :
                                               :                do  m = 2, 5
    19 8.5e-04     0       0     0       0     :                   buf(j,m) = dtpp * dtemp(m)
                                               :                end do
                                               :
     3 1.3e-04     0       0     0       0     :                cuf(j)   = buf(j,3) * buf(j,3)
                                               :                buf(j,1) = cuf(j) + buf(j,2) * buf(j,2) + 
    16 7.2e-04     0       0     0       0     :     >                     buf(j,4) * buf(j,4)
                                               :                q(j) = 0.5d0*(buf(j,2)*ue(j,2) + buf(j,3)*ue(j,3) +
    17 7.6e-04     0       0     0       0     :     >                        buf(j,4)*ue(j,4))
                                               :             end do
                                               :
     3 1.3e-04     0       0     0       0     :             do  j = 1, grid_points(2)-2
                                               :                jm1 = j-1
                                               :                jp1 = j+1
                                               :                  
                                               :                forcing(1,i,j,k) = forcing(1,i,j,k) -
                                               :     >                ty2*( ue(jp1,3)-ue(jm1,3) )+
    13 5.8e-04     0       0     0       0     :     >                dy1ty1*(ue(jp1,1)-2.0d0*ue(j,1)+ue(jm1,1))
                                               :
                                               :                forcing(2,i,j,k) = forcing(2,i,j,k) - ty2*(
                                               :     >                ue(jp1,2)*buf(jp1,3)-ue(jm1,2)*buf(jm1,3))+
                                               :     >                yycon2*(buf(jp1,2)-2.0d0*buf(j,2)+buf(jm1,2))+
    63  0.0028     0       0     1  0.0029     :     >                dy2ty1*( ue(jp1,2)-2.0* ue(j,2)+ ue(jm1,2))
                                               :
                                               :                forcing(3,i,j,k) = forcing(3,i,j,k) - ty2*(
                                               :     >                (ue(jp1,3)*buf(jp1,3)+c2*(ue(jp1,5)-q(jp1)))-
                                               :     >                (ue(jm1,3)*buf(jm1,3)+c2*(ue(jm1,5)-q(jm1))))+
                                               :     >                yycon1*(buf(jp1,3)-2.0d0*buf(j,3)+buf(jm1,3))+
   129  0.0058     0       0     0       0     :     >                dy3ty1*( ue(jp1,3)-2.0d0*ue(j,3) +ue(jm1,3))
                                               :
                                               :                forcing(4,i,j,k) = forcing(4,i,j,k) - ty2*(
                                               :     >                ue(jp1,4)*buf(jp1,3)-ue(jm1,4)*buf(jm1,3))+
                                               :     >                yycon2*(buf(jp1,4)-2.0d0*buf(j,4)+buf(jm1,4))+
    70  0.0031     1  0.0048     0       0     :     >                dy4ty1*( ue(jp1,4)-2.0d0*ue(j,4)+ ue(jm1,4))
                                               :
                                               :                forcing(5,i,j,k) = forcing(5,i,j,k) - ty2*(
                                               :     >                buf(jp1,3)*(c1*ue(jp1,5)-c2*q(jp1))-
                                               :     >                buf(jm1,3)*(c1*ue(jm1,5)-c2*q(jm1)))+
                                               :     >                0.5d0*yycon3*(buf(jp1,1)-2.0d0*buf(j,1)+
                                               :     >                              buf(jm1,1))+
                                               :     >                yycon4*(cuf(jp1)-2.0d0*cuf(j)+cuf(jm1))+
                                               :     >                yycon5*(buf(jp1,5)-2.0d0*buf(j,5)+buf(jm1,5))+
   143  0.0064     1  0.0048     0       0     :     >                dy5ty1*(ue(jp1,5)-2.0d0*ue(j,5)+ue(jm1,5))
                                               :             end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c            Fourth-order dissipation                      
                                               :c---------------------------------------------------------------------
                                               :             do   m = 1, 5
                                               :                j = 1
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
     0       0     0       0     1  0.0029     :     >                    (5.0d0*ue(j,m) - 4.0d0*ue(j+1,m) +ue(j+2,m))
                                               :                j = 2
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (-4.0d0*ue(j-1,m) + 6.0d0*ue(j,m) -
     1 4.5e-05     0       0     0       0     :     >                     4.0d0*ue(j+1,m) +       ue(j+2,m))
                                               :             end do
                                               :
                                               :             do   m = 1, 5
     3 1.3e-04     0       0     0       0     :                do  j = 3, grid_points(2)-4
                                               :                   forcing(m,i,j,k) = forcing(m,i,j,k) - dssp*
                                               :     >                   (ue(j-2,m) - 4.0d0*ue(j-1,m) +
   158  0.0071     0       0     0       0     :     >                    6.0d0*ue(j,m) - 4.0d0*ue(j+1,m) + ue(j+2,m))
                                               :                end do
                                               :             end do
                                               :
     1 4.5e-05     0       0     0       0     :             do   m = 1, 5
                                               :                j = grid_points(2)-3
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (ue(j-2,m) - 4.0d0*ue(j-1,m) +
     3 1.3e-04     0       0     0       0     :     >                    6.0d0*ue(j,m) - 4.0d0*ue(j+1,m))
                                               :                j = grid_points(2)-2
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
     2 9.0e-05     0       0     0       0     :     >                   (ue(j-2,m) - 4.0d0*ue(j-1,m) + 5.0d0*ue(j,m))
                                               :
                                               :             end do
                                               :
                                               :          end do
                                               :       end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      zeta-direction flux differences                      
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :       do  j=1, grid_points(2)-2
                                               :          eta = dble(j) * dnym1
                                               :          do   i = 1, grid_points(1)-2
                                               :             xi = dble(i) * dnxm1
                                               :
     3 1.3e-04     0       0     0       0     :             do k=0, grid_points(3)-1
     5 2.2e-04     0       0     0       0     :                zeta = dble(k) * dnzm1
                                               :
     7 3.1e-04     0       0     0       0     :                call exact_solution(xi, eta, zeta, dtemp)
                                               :                do   m = 1, 5
    48  0.0021     0       0     0       0     :                   ue(k,m) = dtemp(m)
                                               :                end do
                                               :
     2 9.0e-05     0       0     0       0     :                dtpp = 1.0d0/dtemp(1)
                                               :
                                               :                do   m = 2, 5
    22 9.9e-04     0       0     0       0     :                   buf(k,m) = dtpp * dtemp(m)
                                               :                end do
                                               :
     5 2.2e-04     0       0     0       0     :                cuf(k)   = buf(k,4) * buf(k,4)
                                               :                buf(k,1) = cuf(k) + buf(k,2) * buf(k,2) +
    22 9.9e-04     0       0     0       0     :     >                     buf(k,3) * buf(k,3)
                                               :                q(k) = 0.5d0*(buf(k,2)*ue(k,2) + buf(k,3)*ue(k,3) +
    19 8.5e-04     0       0     0       0     :     >                        buf(k,4)*ue(k,4))
                                               :             end do
                                               :
     3 1.3e-04     0       0     0       0     :             do    k=1, grid_points(3)-2
                                               :                km1 = k-1
                                               :                kp1 = k+1
                                               :
                                               :                forcing(1,i,j,k) = forcing(1,i,j,k) -
                                               :     >                 tz2*( ue(kp1,4)-ue(km1,4) )+
    21 9.4e-04     0       0     0       0     :     >                 dz1tz1*(ue(kp1,1)-2.0d0*ue(k,1)+ue(km1,1))
                                               :
                                               :                forcing(2,i,j,k) = forcing(2,i,j,k) - tz2 * (
                                               :     >                 ue(kp1,2)*buf(kp1,4)-ue(km1,2)*buf(km1,4))+
                                               :     >                 zzcon2*(buf(kp1,2)-2.0d0*buf(k,2)+buf(km1,2))+
    46  0.0021     0       0     2  0.0058     :     >                 dz2tz1*( ue(kp1,2)-2.0d0* ue(k,2)+ ue(km1,2))
                                               :
                                               :                forcing(3,i,j,k) = forcing(3,i,j,k) - tz2 * (
                                               :     >                 ue(kp1,3)*buf(kp1,4)-ue(km1,3)*buf(km1,4))+
                                               :     >                 zzcon2*(buf(kp1,3)-2.0d0*buf(k,3)+buf(km1,3))+
    43  0.0019     1  0.0048     0       0     :     >                 dz3tz1*(ue(kp1,3)-2.0d0*ue(k,3)+ue(km1,3))
                                               :
                                               :                forcing(4,i,j,k) = forcing(4,i,j,k) - tz2 * (
                                               :     >                (ue(kp1,4)*buf(kp1,4)+c2*(ue(kp1,5)-q(kp1)))-
                                               :     >                (ue(km1,4)*buf(km1,4)+c2*(ue(km1,5)-q(km1))))+
                                               :     >                zzcon1*(buf(kp1,4)-2.0d0*buf(k,4)+buf(km1,4))+
    87  0.0039     1  0.0048     0       0     :     >                dz4tz1*( ue(kp1,4)-2.0d0*ue(k,4) +ue(km1,4))
                                               :
                                               :                forcing(5,i,j,k) = forcing(5,i,j,k) - tz2 * (
                                               :     >                 buf(kp1,4)*(c1*ue(kp1,5)-c2*q(kp1))-
                                               :     >                 buf(km1,4)*(c1*ue(km1,5)-c2*q(km1)))+
                                               :     >                 0.5d0*zzcon3*(buf(kp1,1)-2.0d0*buf(k,1)
                                               :     >                              +buf(km1,1))+
                                               :     >                 zzcon4*(cuf(kp1)-2.0d0*cuf(k)+cuf(km1))+
                                               :     >                 zzcon5*(buf(kp1,5)-2.0d0*buf(k,5)+buf(km1,5))+
   141  0.0063     0       0     0       0     :     >                 dz5tz1*( ue(kp1,5)-2.0d0*ue(k,5)+ ue(km1,5))
                                               :             end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c            Fourth-order dissipation
                                               :c---------------------------------------------------------------------
     1 4.5e-05     0       0     0       0     :             do   m = 1, 5
                                               :                k = 1
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
     3 1.3e-04     0       0     0       0     :     >                    (5.0d0*ue(k,m) - 4.0d0*ue(k+1,m) +ue(k+2,m))
                                               :                k = 2
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (-4.0d0*ue(k-1,m) + 6.0d0*ue(k,m) -
     1 4.5e-05     0       0     0       0     :     >                     4.0d0*ue(k+1,m) +       ue(k+2,m))
                                               :             end do
                                               :
                                               :             do   m = 1, 5
                                               :                do  k = 3, grid_points(3)-4
                                               :                   forcing(m,i,j,k) = forcing(m,i,j,k) - dssp*
                                               :     >                   (ue(k-2,m) - 4.0d0*ue(k-1,m) +
   123  0.0055     0       0     0       0     :     >                    6.0d0*ue(k,m) - 4.0d0*ue(k+1,m) + ue(k+2,m))
                                               :                end do
                                               :             end do
                                               :
                                               :             do    m = 1, 5
                                               :                k = grid_points(3)-3
                                               :                forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
                                               :     >                   (ue(k-2,m) - 4.0d0*ue(k-1,m) +
     6 2.7e-04     0       0     0       0     :     >                    6.0d0*ue(k,m) - 4.0d0*ue(k+1,m))
                                               :                   k = grid_points(3)-2
                                               :                   forcing(m,i,j,k) = forcing(m,i,j,k) - dssp *
     1 4.5e-05     0       0     0       0     :     >                   (ue(k-2,m) - 4.0d0*ue(k-1,m) + 5.0d0*ue(k,m))
                                               :                end do
                                               :
                                               :          end do
                                               :       end do
                                               :
                                               :c---------------------------------------------------------------------
                                               :c now change the sign of the forcing function, 
                                               :c---------------------------------------------------------------------
                                               :!$omp do schedule(static)
                                               :       do   k = 1, grid_points(3)-2
                                               :          do   j = 1, grid_points(2)-2
    32  0.0014     0       0     0       0     :             do   i = 1, grid_points(1)-2
                                               :                do   m = 1, 5
    77  0.0034     0       0     0       0     :                   forcing(m,i,j,k) = -1.d0 * forcing(m,i,j,k)
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :!$omp end parallel
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
                                               :
                                               :
                                               :
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/error.f"
 * 
 *    115  0.0051     2  0.0096     5  0.0146
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       subroutine error_norm(rms)
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :c this function computes the norm of the difference between the
                                               :c computed solution and the exact solution
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k, m, d
                                               :       double precision xi, eta, zeta, u_exact(5), rms(5), add
                                               :       double precision rms_local(5)
                                               :
                                               :       do m = 1, 5
                                               :          rms(m) = 0.0d0
                                               :       enddo
                                               :
                                               :!$omp parallel default(shared)
                                               :!$omp&        private(i,j,k,m,zeta,eta,xi,add,u_exact,rms_local)
                                               :!$omp&        shared(rms) /* error_norm_._omp_fn.0 total:     85  0.0038     1  0.0048     1  0.0029 */
                                               :       do m = 1, 5
                                               :          rms_local(m) = 0.0d0
                                               :       enddo
                                               :!$omp do
                                               :       do   k = 0, grid_points(3)-1
                                               :          zeta = dble(k) * dnzm1
     1 4.5e-05     0       0     0       0     :          do   j = 0, grid_points(2)-1
                                               :             eta = dble(j) * dnym1
     8 3.6e-04     0       0     0       0     :             do   i = 0, grid_points(1)-1
     7 3.1e-04     0       0     0       0     :                xi = dble(i) * dnxm1
     4 1.8e-04     0       0     0       0     :                call exact_solution(xi, eta, zeta, u_exact)
                                               :
                                               :                do   m = 1, 5
    24  0.0011     1  0.0048     1  0.0029     :                   add = u(m,i,j,k)-u_exact(m)
    41  0.0018     0       0     0       0     :                   rms_local(m) = rms_local(m) + add*add
                                               :                end do
                                               :             end do
                                               :          end do
                                               :       end do
                                               :!$omp end do nowait
                                               :       do m = 1, 5
                                               :!$omp atomic
                                               :          rms(m) = rms(m) + rms_local(m)
                                               :       end do
                                               :!$omp end parallel
                                               :
                                               :       do    m = 1, 5
                                               :          do    d = 1, 3
                                               :             rms(m) = rms(m) / dble(grid_points(d)-2)
                                               :          end do
                                               :          rms(m) = dsqrt(rms(m))
                                               :       end do
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
                                               :
                                               :       subroutine rhs_norm(rms)
                                               :
                                               :       include 'header.h'
                                               :
                                               :       integer i, j, k, d, m
                                               :       double precision rms(5), add
                                               :       double precision rms_local(5)
                                               :
                                               :       do m = 1, 5
                                               :          rms(m) = 0.0d0
                                               :       enddo
                                               :
                                               :!$omp parallel default(shared) private(i,j,k,m,add,rms_local)
                                               :!$omp&        shared(rms) /* rhs_norm_._omp_fn.1 total:     30  0.0013     1  0.0048     4  0.0117 */
                                               :       do m = 1, 5
                                               :          rms_local(m) = 0.0d0
                                               :       enddo
                                               :!$omp do
                                               :       do k = 1, nz2
                                               :          do j = 1, ny2
                                               :             do i = 1, nx2
                                               :                do m = 1, 5
    14 6.3e-04     0       0     2  0.0058     :                   add = rhs(m,i,j,k)
    16 7.2e-04     1  0.0048     2  0.0058     :                   rms_local(m) = rms_local(m) + add*add
                                               :                end do 
                                               :             end do 
                                               :          end do 
                                               :       end do 
                                               :!$omp end do nowait
                                               :       do m = 1, 5
                                               :!$omp atomic
                                               :          rms(m) = rms(m) + rms_local(m)
                                               :       end do
                                               :!$omp end parallel
                                               :
                                               :       do   m = 1, 5
                                               :          do   d = 1, 3
                                               :             rms(m) = rms(m) / dble(grid_points(d)-2)
                                               :          end do
                                               :          rms(m) = dsqrt(rms(m))
                                               :       end do
                                               :
                                               :       return
                                               :       end
                                               :
                                               :
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/malloc/malloc.c"
 * 
 *     69  0.0031     1  0.0048     0       0
 */


 /* free total:     68  0.0030     1  0.0048     0       0 */
 /* _int_malloc total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/adi.f"
 * 
 *      6 2.7e-04     0       0     0       0
 */


                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
     3 1.3e-04     0       0     0       0     :       subroutine  adi /* adi_ total:      6 2.7e-04     0       0     0       0 */
                                               :
                                               :c---------------------------------------------------------------------
                                               :c---------------------------------------------------------------------
                                               :
                                               :       call compute_rhs
                                               :
                                               :       call txinvr
                                               :
     1 4.5e-05     0       0     0       0     :       call x_solve
                                               :
                                               :       call y_solve
                                               :
     1 4.5e-05     0       0     0       0     :       call z_solve
                                               :
                                               :       call add
                                               :
                                               :       return
     1 4.5e-05     0       0     0       0     :       end
                                               :
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/string/../sysdeps/x86_64/strcmp.S"
 * 
 *      2 9.0e-05     0       0     0       0
 */


 /* strcmp total:      2 9.0e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S"
 * 
 *      2 9.0e-05     0       0     0       0
 */


 /* memset total:      2 9.0e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/stdio-common/printf_fp.c"
 * 
 *      2 9.0e-05     0       0     0       0
 */


 /* __GI___printf_fp_l total:      2 9.0e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/libio/iofflush.c"
 * 
 *      2 9.0e-05     0       0     0       0
 */


 /* fflush total:      3 1.3e-04     0       0     0       0 */
/* 
 * Total samples for file : "/home/dzs/Documents/NPB3.3.1/NPB3.3-OMP/SP/sp.f"
 * 
 *      1 4.5e-05     0       0     0       0
 */


                                               :!-------------------------------------------------------------------------!
                                               :!                                                                         !
                                               :!        N  A  S     P A R A L L E L     B E N C H M A R K S  3.3         !
                                               :!                                                                         !
                                               :!                       O p e n M P     V E R S I O N                     !
                                               :!                                                                         !
                                               :!                                   S P                                   !
                                               :!                                                                         !
                                               :!-------------------------------------------------------------------------!
                                               :!                                                                         !
                                               :!    This benchmark is an OpenMP version of the NPB SP code.              !
                                               :!    It is described in NAS Technical Report 99-011.                      !
                                               :!                                                                         !
                                               :!    Permission to use, copy, distribute and modify this software         !
                                               :!    for any purpose with or without fee is hereby granted.  We           !
                                               :!    request, however, that all derived work reference the NAS            !
                                               :!    Parallel Benchmarks 3.3. This software is provided "as is"           !
                                               :!    without express or implied warranty.                                 !
                                               :!                                                                         !
                                               :!    Information on NPB 3.3, including the technical report, the          !
                                               :!    original specifications, source code, results and information        !
                                               :!    on how to submit new results, is available at:                       !
                                               :!                                                                         !
                                               :!           http://www.nas.nasa.gov/Software/NPB/                         !
                                               :!                                                                         !
                                               :!    Send comments or suggestions to  npb@nas.nasa.gov                    !
                                               :!                                                                         !
                                               :!          NAS Parallel Benchmarks Group                                  !
                                               :!          NASA Ames Research Center                                      !
                                               :!          Mail Stop: T27A-1                                              !
                                               :!          Moffett Field, CA   94035-1000                                 !
                                               :!                                                                         !
                                               :!          E-mail:  npb@nas.nasa.gov                                      !
                                               :!          Fax:     (650) 604-3957                                        !
                                               :!                                                                         !
                                               :!-------------------------------------------------------------------------!
                                               :
                                               :c---------------------------------------------------------------------
                                               :c
                                               :c Authors: R. Van der Wijngaart
                                               :c          W. Saphir
                                               :c          H. Jin
                                               :c---------------------------------------------------------------------
                                               :
                                               :c---------------------------------------------------------------------
                                               :       program SP /* MAIN__ total:      1 4.5e-05     0       0     0       0 */
                                               :c---------------------------------------------------------------------
                                               :
                                               :       include  'header.h'
                                               :      
                                               :       integer          i, niter, step, fstatus, n3
                                               :       external         timer_read
                                               :       double precision mflops, t, tmax, timer_read, trecs(t_last)
                                               :       logical          verified
                                               :       character        class
                                               :       character        t_names(t_last)*8
                                               :!$     integer  omp_get_max_threads
                                               :!$     external omp_get_max_threads
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      Read input file (if it exists), else take
                                               :c      defaults from parameters
                                               :c---------------------------------------------------------------------
                                               :          
                                               :       open (unit=2,file='timer.flag',status='old', iostat=fstatus)
                                               :       if (fstatus .eq. 0) then
                                               :         timeron = .true.
                                               :         t_names(t_total) = 'total'
                                               :         t_names(t_rhsx) = 'rhsx'
                                               :         t_names(t_rhsy) = 'rhsy'
                                               :         t_names(t_rhsz) = 'rhsz'
                                               :         t_names(t_rhs) = 'rhs'
                                               :         t_names(t_xsolve) = 'xsolve'
                                               :         t_names(t_ysolve) = 'ysolve'
                                               :         t_names(t_zsolve) = 'zsolve'
                                               :         t_names(t_rdis1) = 'redist1'
                                               :         t_names(t_rdis2) = 'redist2'
                                               :         t_names(t_tzetar) = 'tzetar'
                                               :         t_names(t_ninvr) = 'ninvr'
                                               :         t_names(t_pinvr) = 'pinvr'
                                               :         t_names(t_txinvr) = 'txinvr'
                                               :         t_names(t_add) = 'add'
                                               :         close(2)
                                               :       else
                                               :         timeron = .false.
                                               :       endif
                                               :
                                               :       write(*, 1000)
                                               :       open (unit=2,file='inputsp.data',status='old', iostat=fstatus)
                                               :
                                               :       if (fstatus .eq. 0) then
                                               :         write(*,233) 
                                               : 233     format(' Reading from input file inputsp.data')
                                               :         read (2,*) niter
                                               :         read (2,*) dt
                                               :         read (2,*) grid_points(1), grid_points(2), grid_points(3)
                                               :         close(2)
                                               :       else
                                               :         write(*,234) 
                                               :         niter = niter_default
                                               :         dt    = dt_default
                                               :         grid_points(1) = problem_size
                                               :         grid_points(2) = problem_size
                                               :         grid_points(3) = problem_size
                                               :       endif
                                               : 234   format(' No input file inputsp.data. Using compiled defaults')
                                               :
                                               :       write(*, 1001) grid_points(1), grid_points(2), grid_points(3)
                                               :       write(*, 1002) niter, dt
                                               :!$     write(*, 1003) omp_get_max_threads()
                                               :       write(*, *)
                                               :
                                               : 1000  format(//, ' NAS Parallel Benchmarks (NPB3.3-OMP)',
                                               :     >            ' - SP Benchmark', /)
                                               : 1001  format(' Size: ', i4, 'x', i4, 'x', i4)
                                               : 1002  format(' Iterations: ', i4, '    dt:  ', F11.7)
                                               : 1003  format(' Number of available threads: ', i5)
                                               :
                                               :       if ( (grid_points(1) .gt. IMAX) .or.
                                               :     >      (grid_points(2) .gt. JMAX) .or.
                                               :     >      (grid_points(3) .gt. KMAX) ) then
                                               :             print *, (grid_points(i),i=1,3)
                                               :             print *,' Problem size too big for compiled array sizes'
                                               :             goto 999
                                               :       endif
                                               :       nx2 = grid_points(1) - 2
                                               :       ny2 = grid_points(2) - 2
                                               :       nz2 = grid_points(3) - 2
                                               :
                                               :       call set_constants
                                               :
                                               :       do i = 1, t_last
                                               :          call timer_clear(i)
                                               :       end do
                                               :
                                               :       call exact_rhs
                                               :
                                               :       call initialize
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      do one time step to touch all code, and reinitialize
                                               :c---------------------------------------------------------------------
                                               :       call adi
                                               :       call initialize
                                               :
                                               :       do i = 1, t_last
                                               :          call timer_clear(i)
                                               :       end do
                                               :       call timer_start(1)
                                               :
     1 4.5e-05     0       0     0       0     :       do  step = 1, niter
                                               :
                                               :          if (mod(step, 20) .eq. 0 .or. step .eq. 1) then
                                               :             write(*, 200) step
                                               : 200         format(' Time step ', i4)
                                               :          endif
                                               :
                                               :          call adi
                                               :
                                               :       end do
                                               :
                                               :       call timer_stop(1)
                                               :       tmax = timer_read(1)
                                               :       
                                               :       call verify(niter, class, verified)
                                               :
                                               :       if( tmax .ne. 0. ) then
                                               :          n3 = grid_points(1)*grid_points(2)*grid_points(3)
                                               :          t = (grid_points(1)+grid_points(2)+grid_points(3))/3.0
                                               :          mflops = (881.174 * float( n3 )
                                               :     >             -4683.91 * t**2
                                               :     >             +11484.5 * t
                                               :     >             -19272.4) * float( niter ) / (tmax*1000000.0d0)
                                               :       else
                                               :          mflops = 0.0
                                               :       endif
                                               :
                                               :      call print_results('SP', class, grid_points(1), 
                                               :     >     grid_points(2), grid_points(3), niter, 
                                               :     >     tmax, mflops, '          floating point', 
                                               :     >     verified, npbversion,compiletime, cs1, cs2, cs3, cs4, cs5, 
                                               :     >     cs6, '(none)')
                                               :
                                               :c---------------------------------------------------------------------
                                               :c      More timers
                                               :c---------------------------------------------------------------------
                                               :       if (.not.timeron) goto 999
                                               :
                                               :       do i=1, t_last
                                               :          trecs(i) = timer_read(i)
                                               :       end do
                                               :       if (tmax .eq. 0.0) tmax = 1.0
                                               :
                                               :       write(*,800)
                                               : 800   format('  SECTION   Time (secs)')
                                               :
                                               :       do i=1, t_last
                                               :          write(*,810) t_names(i), trecs(i), trecs(i)*100./tmax
                                               :          if (i.eq.t_rhs) then
                                               :             t = trecs(t_rhsx) + trecs(t_rhsy) + trecs(t_rhsz)
                                               :             write(*,820) 'sub-rhs', t, t*100./tmax
                                               :             t = trecs(t_rhs) - t
                                               :             write(*,820) 'rest-rhs', t, t*100./tmax
                                               :          elseif (i.eq.t_zsolve) then
                                               :             t = trecs(t_zsolve) - trecs(t_rdis1) - trecs(t_rdis2)
                                               :             write(*,820) 'sub-zsol', t, t*100./tmax
                                               :          elseif (i.eq.t_rdis2) then
                                               :             t = trecs(t_rdis1) + trecs(t_rdis2)
                                               :             write(*,820) 'redist', t, t*100./tmax
                                               :          endif
                                               : 810      format(2x,a8,':',f9.3,'  (',f6.2,'%)')
                                               : 820      format('    --> ',a8,':',f9.3,'  (',f6.2,'%)')
                                               :       end do
                                               :
                                               : 999   continue
                                               :
                                               :       end
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/time/../sysdeps/unix/sysv/linux/x86/time.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* time total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/string/../sysdeps/x86_64/multiarch/strcpy-sse2-unaligned.S"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* __stpcpy_sse2_unaligned total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/stdlib/getenv.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* getenv total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/stdio-common/vfprintf.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* printf_positional total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/nptl/../nptl/pthread_mutex_lock.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* pthread_mutex_lock total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/locale/uselocale.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* uselocale total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/libio/libioP.h"
 * 
 *      1 4.5e-05     0       0     0       0
 */


/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/libio/iofopen.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* fopen@@GLIBC_2.2.5 total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/libio/fileops.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* _IO_file_sync@@GLIBC_2.2.5 total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/intl/localealias.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* read_alias_file total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/elf/do-rel.h"
 * 
 *      1 4.5e-05     0       0     0       0
 */


/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/elf/dl-version.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* _dl_check_map_versions total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/elf/dl-addr.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* _dl_addr total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/elf/../elf/dl-runtime.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* _dl_fixup total:      1 4.5e-05     0       0     0       0 */
/* 
 * Total samples for file : "/build/glibc-CxtIbX/glibc-2.26/debug/snprintf_chk.c"
 * 
 *      1 4.5e-05     0       0     0       0
 */


 /* __snprintf_chk total:      1 4.5e-05     0       0     0       0 */
